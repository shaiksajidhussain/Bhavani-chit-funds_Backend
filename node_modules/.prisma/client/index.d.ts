
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ChitScheme
 * 
 */
export type ChitScheme = $Result.DefaultSelection<Prisma.$ChitSchemePayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model CustomerScheme
 * 
 */
export type CustomerScheme = $Result.DefaultSelection<Prisma.$CustomerSchemePayload>
/**
 * Model Collection
 * 
 */
export type Collection = $Result.DefaultSelection<Prisma.$CollectionPayload>
/**
 * Model Auction
 * 
 */
export type Auction = $Result.DefaultSelection<Prisma.$AuctionPayload>
/**
 * Model PassbookEntry
 * 
 */
export type PassbookEntry = $Result.DefaultSelection<Prisma.$PassbookEntryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  AGENT: 'AGENT',
  COLLECTOR: 'COLLECTOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const DurationType: {
  DAYS: 'DAYS',
  MONTHS: 'MONTHS'
};

export type DurationType = (typeof DurationType)[keyof typeof DurationType]


export const PaymentType: {
  DAILY: 'DAILY',
  MONTHLY: 'MONTHLY'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const SchemeStatus: {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

export type SchemeStatus = (typeof SchemeStatus)[keyof typeof SchemeStatus]


export const CustomerStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DEFAULTED: 'DEFAULTED'
};

export type CustomerStatus = (typeof CustomerStatus)[keyof typeof CustomerStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER',
  UPI: 'UPI',
  CHEQUE: 'CHEQUE',
  NOT_PAID: 'NOT_PAID'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const AuctionStatus: {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type AuctionStatus = (typeof AuctionStatus)[keyof typeof AuctionStatus]


export const EntryType: {
  GENERATED: 'GENERATED',
  MANUAL: 'MANUAL'
};

export type EntryType = (typeof EntryType)[keyof typeof EntryType]


export const PaymentFrequency: {
  DAILY: 'DAILY',
  MONTHLY: 'MONTHLY'
};

export type PaymentFrequency = (typeof PaymentFrequency)[keyof typeof PaymentFrequency]


export const ChitLiftingStatus: {
  YES: 'YES',
  NO: 'NO'
};

export type ChitLiftingStatus = (typeof ChitLiftingStatus)[keyof typeof ChitLiftingStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type DurationType = $Enums.DurationType

export const DurationType: typeof $Enums.DurationType

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type SchemeStatus = $Enums.SchemeStatus

export const SchemeStatus: typeof $Enums.SchemeStatus

export type CustomerStatus = $Enums.CustomerStatus

export const CustomerStatus: typeof $Enums.CustomerStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type AuctionStatus = $Enums.AuctionStatus

export const AuctionStatus: typeof $Enums.AuctionStatus

export type EntryType = $Enums.EntryType

export const EntryType: typeof $Enums.EntryType

export type PaymentFrequency = $Enums.PaymentFrequency

export const PaymentFrequency: typeof $Enums.PaymentFrequency

export type ChitLiftingStatus = $Enums.ChitLiftingStatus

export const ChitLiftingStatus: typeof $Enums.ChitLiftingStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.chitScheme`: Exposes CRUD operations for the **ChitScheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChitSchemes
    * const chitSchemes = await prisma.chitScheme.findMany()
    * ```
    */
  get chitScheme(): Prisma.ChitSchemeDelegate<ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.customerScheme`: Exposes CRUD operations for the **CustomerScheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerSchemes
    * const customerSchemes = await prisma.customerScheme.findMany()
    * ```
    */
  get customerScheme(): Prisma.CustomerSchemeDelegate<ExtArgs>;

  /**
   * `prisma.collection`: Exposes CRUD operations for the **Collection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collections
    * const collections = await prisma.collection.findMany()
    * ```
    */
  get collection(): Prisma.CollectionDelegate<ExtArgs>;

  /**
   * `prisma.auction`: Exposes CRUD operations for the **Auction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auctions
    * const auctions = await prisma.auction.findMany()
    * ```
    */
  get auction(): Prisma.AuctionDelegate<ExtArgs>;

  /**
   * `prisma.passbookEntry`: Exposes CRUD operations for the **PassbookEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PassbookEntries
    * const passbookEntries = await prisma.passbookEntry.findMany()
    * ```
    */
  get passbookEntry(): Prisma.PassbookEntryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ChitScheme: 'ChitScheme',
    Customer: 'Customer',
    CustomerScheme: 'CustomerScheme',
    Collection: 'Collection',
    Auction: 'Auction',
    PassbookEntry: 'PassbookEntry'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "chitScheme" | "customer" | "customerScheme" | "collection" | "auction" | "passbookEntry"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ChitScheme: {
        payload: Prisma.$ChitSchemePayload<ExtArgs>
        fields: Prisma.ChitSchemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChitSchemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChitSchemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          findFirst: {
            args: Prisma.ChitSchemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChitSchemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          findMany: {
            args: Prisma.ChitSchemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>[]
          }
          create: {
            args: Prisma.ChitSchemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          createMany: {
            args: Prisma.ChitSchemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChitSchemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>[]
          }
          delete: {
            args: Prisma.ChitSchemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          update: {
            args: Prisma.ChitSchemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          deleteMany: {
            args: Prisma.ChitSchemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChitSchemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChitSchemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChitSchemePayload>
          }
          aggregate: {
            args: Prisma.ChitSchemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChitScheme>
          }
          groupBy: {
            args: Prisma.ChitSchemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChitSchemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChitSchemeCountArgs<ExtArgs>
            result: $Utils.Optional<ChitSchemeCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      CustomerScheme: {
        payload: Prisma.$CustomerSchemePayload<ExtArgs>
        fields: Prisma.CustomerSchemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerSchemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerSchemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          findFirst: {
            args: Prisma.CustomerSchemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerSchemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          findMany: {
            args: Prisma.CustomerSchemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>[]
          }
          create: {
            args: Prisma.CustomerSchemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          createMany: {
            args: Prisma.CustomerSchemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerSchemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>[]
          }
          delete: {
            args: Prisma.CustomerSchemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          update: {
            args: Prisma.CustomerSchemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          deleteMany: {
            args: Prisma.CustomerSchemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerSchemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerSchemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSchemePayload>
          }
          aggregate: {
            args: Prisma.CustomerSchemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerScheme>
          }
          groupBy: {
            args: Prisma.CustomerSchemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerSchemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerSchemeCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerSchemeCountAggregateOutputType> | number
          }
        }
      }
      Collection: {
        payload: Prisma.$CollectionPayload<ExtArgs>
        fields: Prisma.CollectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findFirst: {
            args: Prisma.CollectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          findMany: {
            args: Prisma.CollectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          create: {
            args: Prisma.CollectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          createMany: {
            args: Prisma.CollectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>[]
          }
          delete: {
            args: Prisma.CollectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          update: {
            args: Prisma.CollectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          deleteMany: {
            args: Prisma.CollectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollectionPayload>
          }
          aggregate: {
            args: Prisma.CollectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollection>
          }
          groupBy: {
            args: Prisma.CollectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollectionCountArgs<ExtArgs>
            result: $Utils.Optional<CollectionCountAggregateOutputType> | number
          }
        }
      }
      Auction: {
        payload: Prisma.$AuctionPayload<ExtArgs>
        fields: Prisma.AuctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findFirst: {
            args: Prisma.AuctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findMany: {
            args: Prisma.AuctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          create: {
            args: Prisma.AuctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          createMany: {
            args: Prisma.AuctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          delete: {
            args: Prisma.AuctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          update: {
            args: Prisma.AuctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          deleteMany: {
            args: Prisma.AuctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          aggregate: {
            args: Prisma.AuctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuction>
          }
          groupBy: {
            args: Prisma.AuctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionCountArgs<ExtArgs>
            result: $Utils.Optional<AuctionCountAggregateOutputType> | number
          }
        }
      }
      PassbookEntry: {
        payload: Prisma.$PassbookEntryPayload<ExtArgs>
        fields: Prisma.PassbookEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PassbookEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PassbookEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          findFirst: {
            args: Prisma.PassbookEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PassbookEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          findMany: {
            args: Prisma.PassbookEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>[]
          }
          create: {
            args: Prisma.PassbookEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          createMany: {
            args: Prisma.PassbookEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PassbookEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>[]
          }
          delete: {
            args: Prisma.PassbookEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          update: {
            args: Prisma.PassbookEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          deleteMany: {
            args: Prisma.PassbookEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PassbookEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PassbookEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PassbookEntryPayload>
          }
          aggregate: {
            args: Prisma.PassbookEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePassbookEntry>
          }
          groupBy: {
            args: Prisma.PassbookEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PassbookEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PassbookEntryCountArgs<ExtArgs>
            result: $Utils.Optional<PassbookEntryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    collections: number
    auctions: number
    createdSchemes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | UserCountOutputTypeCountCollectionsArgs
    auctions?: boolean | UserCountOutputTypeCountAuctionsArgs
    createdSchemes?: boolean | UserCountOutputTypeCountCreatedSchemesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSchemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChitSchemeWhereInput
  }


  /**
   * Count Type ChitSchemeCountOutputType
   */

  export type ChitSchemeCountOutputType = {
    customerSchemes: number
    auctions: number
  }

  export type ChitSchemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerSchemes?: boolean | ChitSchemeCountOutputTypeCountCustomerSchemesArgs
    auctions?: boolean | ChitSchemeCountOutputTypeCountAuctionsArgs
  }

  // Custom InputTypes
  /**
   * ChitSchemeCountOutputType without action
   */
  export type ChitSchemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitSchemeCountOutputType
     */
    select?: ChitSchemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChitSchemeCountOutputType without action
   */
  export type ChitSchemeCountOutputTypeCountCustomerSchemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSchemeWhereInput
  }

  /**
   * ChitSchemeCountOutputType without action
   */
  export type ChitSchemeCountOutputTypeCountAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    schemes: number
    collections: number
    wonAuctions: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemes?: boolean | CustomerCountOutputTypeCountSchemesArgs
    collections?: boolean | CustomerCountOutputTypeCountCollectionsArgs
    wonAuctions?: boolean | CustomerCountOutputTypeCountWonAuctionsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSchemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSchemeWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountWonAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
  }


  /**
   * Count Type CustomerSchemeCountOutputType
   */

  export type CustomerSchemeCountOutputType = {
    passbookEntries: number
  }

  export type CustomerSchemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passbookEntries?: boolean | CustomerSchemeCountOutputTypeCountPassbookEntriesArgs
  }

  // Custom InputTypes
  /**
   * CustomerSchemeCountOutputType without action
   */
  export type CustomerSchemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSchemeCountOutputType
     */
    select?: CustomerSchemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerSchemeCountOutputType without action
   */
  export type CustomerSchemeCountOutputTypeCountPassbookEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassbookEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    collections?: boolean | User$collectionsArgs<ExtArgs>
    auctions?: boolean | User$auctionsArgs<ExtArgs>
    createdSchemes?: boolean | User$createdSchemesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    collections?: boolean | User$collectionsArgs<ExtArgs>
    auctions?: boolean | User$auctionsArgs<ExtArgs>
    createdSchemes?: boolean | User$createdSchemesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      collections: Prisma.$CollectionPayload<ExtArgs>[]
      auctions: Prisma.$AuctionPayload<ExtArgs>[]
      createdSchemes: Prisma.$ChitSchemePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    collections<T extends User$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany"> | Null>
    auctions<T extends User$auctionsArgs<ExtArgs> = {}>(args?: Subset<T, User$auctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany"> | Null>
    createdSchemes<T extends User$createdSchemesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSchemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.collections
   */
  export type User$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * User.auctions
   */
  export type User$auctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    cursor?: AuctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * User.createdSchemes
   */
  export type User$createdSchemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    where?: ChitSchemeWhereInput
    orderBy?: ChitSchemeOrderByWithRelationInput | ChitSchemeOrderByWithRelationInput[]
    cursor?: ChitSchemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChitSchemeScalarFieldEnum | ChitSchemeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ChitScheme
   */

  export type AggregateChitScheme = {
    _count: ChitSchemeCountAggregateOutputType | null
    _avg: ChitSchemeAvgAggregateOutputType | null
    _sum: ChitSchemeSumAggregateOutputType | null
    _min: ChitSchemeMinAggregateOutputType | null
    _max: ChitSchemeMaxAggregateOutputType | null
  }

  export type ChitSchemeAvgAggregateOutputType = {
    chitValue: number | null
    duration: number | null
    dailyPayment: number | null
    monthlyPayment: number | null
    numberOfMembers: number | null
    membersEnrolled: number | null
    commissionRate: number | null
    penaltyRate: number | null
    minBidAmount: number | null
    maxBidAmount: number | null
  }

  export type ChitSchemeSumAggregateOutputType = {
    chitValue: number | null
    duration: number | null
    dailyPayment: number | null
    monthlyPayment: number | null
    numberOfMembers: number | null
    membersEnrolled: number | null
    commissionRate: number | null
    penaltyRate: number | null
    minBidAmount: number | null
    maxBidAmount: number | null
  }

  export type ChitSchemeMinAggregateOutputType = {
    id: string | null
    name: string | null
    chitValue: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    paymentType: $Enums.PaymentType | null
    dailyPayment: number | null
    monthlyPayment: number | null
    numberOfMembers: number | null
    auctionRules: string | null
    status: $Enums.SchemeStatus | null
    membersEnrolled: number | null
    startDate: Date | null
    endDate: Date | null
    lastDate: Date | null
    description: string | null
    commissionRate: number | null
    penaltyRate: number | null
    minBidAmount: number | null
    maxBidAmount: number | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChitSchemeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    chitValue: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    paymentType: $Enums.PaymentType | null
    dailyPayment: number | null
    monthlyPayment: number | null
    numberOfMembers: number | null
    auctionRules: string | null
    status: $Enums.SchemeStatus | null
    membersEnrolled: number | null
    startDate: Date | null
    endDate: Date | null
    lastDate: Date | null
    description: string | null
    commissionRate: number | null
    penaltyRate: number | null
    minBidAmount: number | null
    maxBidAmount: number | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChitSchemeCountAggregateOutputType = {
    id: number
    name: number
    chitValue: number
    duration: number
    durationType: number
    paymentType: number
    dailyPayment: number
    monthlyPayment: number
    numberOfMembers: number
    auctionRules: number
    status: number
    membersEnrolled: number
    startDate: number
    endDate: number
    lastDate: number
    description: number
    commissionRate: number
    penaltyRate: number
    minBidAmount: number
    maxBidAmount: number
    isActive: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChitSchemeAvgAggregateInputType = {
    chitValue?: true
    duration?: true
    dailyPayment?: true
    monthlyPayment?: true
    numberOfMembers?: true
    membersEnrolled?: true
    commissionRate?: true
    penaltyRate?: true
    minBidAmount?: true
    maxBidAmount?: true
  }

  export type ChitSchemeSumAggregateInputType = {
    chitValue?: true
    duration?: true
    dailyPayment?: true
    monthlyPayment?: true
    numberOfMembers?: true
    membersEnrolled?: true
    commissionRate?: true
    penaltyRate?: true
    minBidAmount?: true
    maxBidAmount?: true
  }

  export type ChitSchemeMinAggregateInputType = {
    id?: true
    name?: true
    chitValue?: true
    duration?: true
    durationType?: true
    paymentType?: true
    dailyPayment?: true
    monthlyPayment?: true
    numberOfMembers?: true
    auctionRules?: true
    status?: true
    membersEnrolled?: true
    startDate?: true
    endDate?: true
    lastDate?: true
    description?: true
    commissionRate?: true
    penaltyRate?: true
    minBidAmount?: true
    maxBidAmount?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChitSchemeMaxAggregateInputType = {
    id?: true
    name?: true
    chitValue?: true
    duration?: true
    durationType?: true
    paymentType?: true
    dailyPayment?: true
    monthlyPayment?: true
    numberOfMembers?: true
    auctionRules?: true
    status?: true
    membersEnrolled?: true
    startDate?: true
    endDate?: true
    lastDate?: true
    description?: true
    commissionRate?: true
    penaltyRate?: true
    minBidAmount?: true
    maxBidAmount?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChitSchemeCountAggregateInputType = {
    id?: true
    name?: true
    chitValue?: true
    duration?: true
    durationType?: true
    paymentType?: true
    dailyPayment?: true
    monthlyPayment?: true
    numberOfMembers?: true
    auctionRules?: true
    status?: true
    membersEnrolled?: true
    startDate?: true
    endDate?: true
    lastDate?: true
    description?: true
    commissionRate?: true
    penaltyRate?: true
    minBidAmount?: true
    maxBidAmount?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChitSchemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChitScheme to aggregate.
     */
    where?: ChitSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChitSchemes to fetch.
     */
    orderBy?: ChitSchemeOrderByWithRelationInput | ChitSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChitSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChitSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChitSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChitSchemes
    **/
    _count?: true | ChitSchemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChitSchemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChitSchemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChitSchemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChitSchemeMaxAggregateInputType
  }

  export type GetChitSchemeAggregateType<T extends ChitSchemeAggregateArgs> = {
        [P in keyof T & keyof AggregateChitScheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChitScheme[P]>
      : GetScalarType<T[P], AggregateChitScheme[P]>
  }




  export type ChitSchemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChitSchemeWhereInput
    orderBy?: ChitSchemeOrderByWithAggregationInput | ChitSchemeOrderByWithAggregationInput[]
    by: ChitSchemeScalarFieldEnum[] | ChitSchemeScalarFieldEnum
    having?: ChitSchemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChitSchemeCountAggregateInputType | true
    _avg?: ChitSchemeAvgAggregateInputType
    _sum?: ChitSchemeSumAggregateInputType
    _min?: ChitSchemeMinAggregateInputType
    _max?: ChitSchemeMaxAggregateInputType
  }

  export type ChitSchemeGroupByOutputType = {
    id: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType: $Enums.PaymentType
    dailyPayment: number | null
    monthlyPayment: number | null
    numberOfMembers: number
    auctionRules: string | null
    status: $Enums.SchemeStatus
    membersEnrolled: number
    startDate: Date
    endDate: Date | null
    lastDate: Date | null
    description: string | null
    commissionRate: number | null
    penaltyRate: number | null
    minBidAmount: number | null
    maxBidAmount: number | null
    isActive: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChitSchemeCountAggregateOutputType | null
    _avg: ChitSchemeAvgAggregateOutputType | null
    _sum: ChitSchemeSumAggregateOutputType | null
    _min: ChitSchemeMinAggregateOutputType | null
    _max: ChitSchemeMaxAggregateOutputType | null
  }

  type GetChitSchemeGroupByPayload<T extends ChitSchemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChitSchemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChitSchemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChitSchemeGroupByOutputType[P]>
            : GetScalarType<T[P], ChitSchemeGroupByOutputType[P]>
        }
      >
    >


  export type ChitSchemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    chitValue?: boolean
    duration?: boolean
    durationType?: boolean
    paymentType?: boolean
    dailyPayment?: boolean
    monthlyPayment?: boolean
    numberOfMembers?: boolean
    auctionRules?: boolean
    status?: boolean
    membersEnrolled?: boolean
    startDate?: boolean
    endDate?: boolean
    lastDate?: boolean
    description?: boolean
    commissionRate?: boolean
    penaltyRate?: boolean
    minBidAmount?: boolean
    maxBidAmount?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerSchemes?: boolean | ChitScheme$customerSchemesArgs<ExtArgs>
    auctions?: boolean | ChitScheme$auctionsArgs<ExtArgs>
    creator?: boolean | ChitScheme$creatorArgs<ExtArgs>
    _count?: boolean | ChitSchemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chitScheme"]>

  export type ChitSchemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    chitValue?: boolean
    duration?: boolean
    durationType?: boolean
    paymentType?: boolean
    dailyPayment?: boolean
    monthlyPayment?: boolean
    numberOfMembers?: boolean
    auctionRules?: boolean
    status?: boolean
    membersEnrolled?: boolean
    startDate?: boolean
    endDate?: boolean
    lastDate?: boolean
    description?: boolean
    commissionRate?: boolean
    penaltyRate?: boolean
    minBidAmount?: boolean
    maxBidAmount?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | ChitScheme$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["chitScheme"]>

  export type ChitSchemeSelectScalar = {
    id?: boolean
    name?: boolean
    chitValue?: boolean
    duration?: boolean
    durationType?: boolean
    paymentType?: boolean
    dailyPayment?: boolean
    monthlyPayment?: boolean
    numberOfMembers?: boolean
    auctionRules?: boolean
    status?: boolean
    membersEnrolled?: boolean
    startDate?: boolean
    endDate?: boolean
    lastDate?: boolean
    description?: boolean
    commissionRate?: boolean
    penaltyRate?: boolean
    minBidAmount?: boolean
    maxBidAmount?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChitSchemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerSchemes?: boolean | ChitScheme$customerSchemesArgs<ExtArgs>
    auctions?: boolean | ChitScheme$auctionsArgs<ExtArgs>
    creator?: boolean | ChitScheme$creatorArgs<ExtArgs>
    _count?: boolean | ChitSchemeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChitSchemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | ChitScheme$creatorArgs<ExtArgs>
  }

  export type $ChitSchemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChitScheme"
    objects: {
      customerSchemes: Prisma.$CustomerSchemePayload<ExtArgs>[]
      auctions: Prisma.$AuctionPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      chitValue: number
      duration: number
      durationType: $Enums.DurationType
      paymentType: $Enums.PaymentType
      dailyPayment: number | null
      monthlyPayment: number | null
      numberOfMembers: number
      auctionRules: string | null
      status: $Enums.SchemeStatus
      membersEnrolled: number
      startDate: Date
      endDate: Date | null
      lastDate: Date | null
      description: string | null
      commissionRate: number | null
      penaltyRate: number | null
      minBidAmount: number | null
      maxBidAmount: number | null
      isActive: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chitScheme"]>
    composites: {}
  }

  type ChitSchemeGetPayload<S extends boolean | null | undefined | ChitSchemeDefaultArgs> = $Result.GetResult<Prisma.$ChitSchemePayload, S>

  type ChitSchemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChitSchemeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChitSchemeCountAggregateInputType | true
    }

  export interface ChitSchemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChitScheme'], meta: { name: 'ChitScheme' } }
    /**
     * Find zero or one ChitScheme that matches the filter.
     * @param {ChitSchemeFindUniqueArgs} args - Arguments to find a ChitScheme
     * @example
     * // Get one ChitScheme
     * const chitScheme = await prisma.chitScheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChitSchemeFindUniqueArgs>(args: SelectSubset<T, ChitSchemeFindUniqueArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChitScheme that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChitSchemeFindUniqueOrThrowArgs} args - Arguments to find a ChitScheme
     * @example
     * // Get one ChitScheme
     * const chitScheme = await prisma.chitScheme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChitSchemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChitSchemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChitScheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeFindFirstArgs} args - Arguments to find a ChitScheme
     * @example
     * // Get one ChitScheme
     * const chitScheme = await prisma.chitScheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChitSchemeFindFirstArgs>(args?: SelectSubset<T, ChitSchemeFindFirstArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChitScheme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeFindFirstOrThrowArgs} args - Arguments to find a ChitScheme
     * @example
     * // Get one ChitScheme
     * const chitScheme = await prisma.chitScheme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChitSchemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChitSchemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChitSchemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChitSchemes
     * const chitSchemes = await prisma.chitScheme.findMany()
     * 
     * // Get first 10 ChitSchemes
     * const chitSchemes = await prisma.chitScheme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chitSchemeWithIdOnly = await prisma.chitScheme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChitSchemeFindManyArgs>(args?: SelectSubset<T, ChitSchemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChitScheme.
     * @param {ChitSchemeCreateArgs} args - Arguments to create a ChitScheme.
     * @example
     * // Create one ChitScheme
     * const ChitScheme = await prisma.chitScheme.create({
     *   data: {
     *     // ... data to create a ChitScheme
     *   }
     * })
     * 
     */
    create<T extends ChitSchemeCreateArgs>(args: SelectSubset<T, ChitSchemeCreateArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChitSchemes.
     * @param {ChitSchemeCreateManyArgs} args - Arguments to create many ChitSchemes.
     * @example
     * // Create many ChitSchemes
     * const chitScheme = await prisma.chitScheme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChitSchemeCreateManyArgs>(args?: SelectSubset<T, ChitSchemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChitSchemes and returns the data saved in the database.
     * @param {ChitSchemeCreateManyAndReturnArgs} args - Arguments to create many ChitSchemes.
     * @example
     * // Create many ChitSchemes
     * const chitScheme = await prisma.chitScheme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChitSchemes and only return the `id`
     * const chitSchemeWithIdOnly = await prisma.chitScheme.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChitSchemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChitSchemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChitScheme.
     * @param {ChitSchemeDeleteArgs} args - Arguments to delete one ChitScheme.
     * @example
     * // Delete one ChitScheme
     * const ChitScheme = await prisma.chitScheme.delete({
     *   where: {
     *     // ... filter to delete one ChitScheme
     *   }
     * })
     * 
     */
    delete<T extends ChitSchemeDeleteArgs>(args: SelectSubset<T, ChitSchemeDeleteArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChitScheme.
     * @param {ChitSchemeUpdateArgs} args - Arguments to update one ChitScheme.
     * @example
     * // Update one ChitScheme
     * const chitScheme = await prisma.chitScheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChitSchemeUpdateArgs>(args: SelectSubset<T, ChitSchemeUpdateArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChitSchemes.
     * @param {ChitSchemeDeleteManyArgs} args - Arguments to filter ChitSchemes to delete.
     * @example
     * // Delete a few ChitSchemes
     * const { count } = await prisma.chitScheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChitSchemeDeleteManyArgs>(args?: SelectSubset<T, ChitSchemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChitSchemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChitSchemes
     * const chitScheme = await prisma.chitScheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChitSchemeUpdateManyArgs>(args: SelectSubset<T, ChitSchemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChitScheme.
     * @param {ChitSchemeUpsertArgs} args - Arguments to update or create a ChitScheme.
     * @example
     * // Update or create a ChitScheme
     * const chitScheme = await prisma.chitScheme.upsert({
     *   create: {
     *     // ... data to create a ChitScheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChitScheme we want to update
     *   }
     * })
     */
    upsert<T extends ChitSchemeUpsertArgs>(args: SelectSubset<T, ChitSchemeUpsertArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChitSchemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeCountArgs} args - Arguments to filter ChitSchemes to count.
     * @example
     * // Count the number of ChitSchemes
     * const count = await prisma.chitScheme.count({
     *   where: {
     *     // ... the filter for the ChitSchemes we want to count
     *   }
     * })
    **/
    count<T extends ChitSchemeCountArgs>(
      args?: Subset<T, ChitSchemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChitSchemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChitScheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChitSchemeAggregateArgs>(args: Subset<T, ChitSchemeAggregateArgs>): Prisma.PrismaPromise<GetChitSchemeAggregateType<T>>

    /**
     * Group by ChitScheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChitSchemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChitSchemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChitSchemeGroupByArgs['orderBy'] }
        : { orderBy?: ChitSchemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChitSchemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChitSchemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChitScheme model
   */
  readonly fields: ChitSchemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChitScheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChitSchemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customerSchemes<T extends ChitScheme$customerSchemesArgs<ExtArgs> = {}>(args?: Subset<T, ChitScheme$customerSchemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findMany"> | Null>
    auctions<T extends ChitScheme$auctionsArgs<ExtArgs> = {}>(args?: Subset<T, ChitScheme$auctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends ChitScheme$creatorArgs<ExtArgs> = {}>(args?: Subset<T, ChitScheme$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChitScheme model
   */ 
  interface ChitSchemeFieldRefs {
    readonly id: FieldRef<"ChitScheme", 'String'>
    readonly name: FieldRef<"ChitScheme", 'String'>
    readonly chitValue: FieldRef<"ChitScheme", 'Int'>
    readonly duration: FieldRef<"ChitScheme", 'Int'>
    readonly durationType: FieldRef<"ChitScheme", 'DurationType'>
    readonly paymentType: FieldRef<"ChitScheme", 'PaymentType'>
    readonly dailyPayment: FieldRef<"ChitScheme", 'Int'>
    readonly monthlyPayment: FieldRef<"ChitScheme", 'Int'>
    readonly numberOfMembers: FieldRef<"ChitScheme", 'Int'>
    readonly auctionRules: FieldRef<"ChitScheme", 'String'>
    readonly status: FieldRef<"ChitScheme", 'SchemeStatus'>
    readonly membersEnrolled: FieldRef<"ChitScheme", 'Int'>
    readonly startDate: FieldRef<"ChitScheme", 'DateTime'>
    readonly endDate: FieldRef<"ChitScheme", 'DateTime'>
    readonly lastDate: FieldRef<"ChitScheme", 'DateTime'>
    readonly description: FieldRef<"ChitScheme", 'String'>
    readonly commissionRate: FieldRef<"ChitScheme", 'Float'>
    readonly penaltyRate: FieldRef<"ChitScheme", 'Float'>
    readonly minBidAmount: FieldRef<"ChitScheme", 'Int'>
    readonly maxBidAmount: FieldRef<"ChitScheme", 'Int'>
    readonly isActive: FieldRef<"ChitScheme", 'Boolean'>
    readonly createdBy: FieldRef<"ChitScheme", 'String'>
    readonly createdAt: FieldRef<"ChitScheme", 'DateTime'>
    readonly updatedAt: FieldRef<"ChitScheme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChitScheme findUnique
   */
  export type ChitSchemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter, which ChitScheme to fetch.
     */
    where: ChitSchemeWhereUniqueInput
  }

  /**
   * ChitScheme findUniqueOrThrow
   */
  export type ChitSchemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter, which ChitScheme to fetch.
     */
    where: ChitSchemeWhereUniqueInput
  }

  /**
   * ChitScheme findFirst
   */
  export type ChitSchemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter, which ChitScheme to fetch.
     */
    where?: ChitSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChitSchemes to fetch.
     */
    orderBy?: ChitSchemeOrderByWithRelationInput | ChitSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChitSchemes.
     */
    cursor?: ChitSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChitSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChitSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChitSchemes.
     */
    distinct?: ChitSchemeScalarFieldEnum | ChitSchemeScalarFieldEnum[]
  }

  /**
   * ChitScheme findFirstOrThrow
   */
  export type ChitSchemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter, which ChitScheme to fetch.
     */
    where?: ChitSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChitSchemes to fetch.
     */
    orderBy?: ChitSchemeOrderByWithRelationInput | ChitSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChitSchemes.
     */
    cursor?: ChitSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChitSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChitSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChitSchemes.
     */
    distinct?: ChitSchemeScalarFieldEnum | ChitSchemeScalarFieldEnum[]
  }

  /**
   * ChitScheme findMany
   */
  export type ChitSchemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter, which ChitSchemes to fetch.
     */
    where?: ChitSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChitSchemes to fetch.
     */
    orderBy?: ChitSchemeOrderByWithRelationInput | ChitSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChitSchemes.
     */
    cursor?: ChitSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChitSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChitSchemes.
     */
    skip?: number
    distinct?: ChitSchemeScalarFieldEnum | ChitSchemeScalarFieldEnum[]
  }

  /**
   * ChitScheme create
   */
  export type ChitSchemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChitScheme.
     */
    data: XOR<ChitSchemeCreateInput, ChitSchemeUncheckedCreateInput>
  }

  /**
   * ChitScheme createMany
   */
  export type ChitSchemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChitSchemes.
     */
    data: ChitSchemeCreateManyInput | ChitSchemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChitScheme createManyAndReturn
   */
  export type ChitSchemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChitSchemes.
     */
    data: ChitSchemeCreateManyInput | ChitSchemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChitScheme update
   */
  export type ChitSchemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChitScheme.
     */
    data: XOR<ChitSchemeUpdateInput, ChitSchemeUncheckedUpdateInput>
    /**
     * Choose, which ChitScheme to update.
     */
    where: ChitSchemeWhereUniqueInput
  }

  /**
   * ChitScheme updateMany
   */
  export type ChitSchemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChitSchemes.
     */
    data: XOR<ChitSchemeUpdateManyMutationInput, ChitSchemeUncheckedUpdateManyInput>
    /**
     * Filter which ChitSchemes to update
     */
    where?: ChitSchemeWhereInput
  }

  /**
   * ChitScheme upsert
   */
  export type ChitSchemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChitScheme to update in case it exists.
     */
    where: ChitSchemeWhereUniqueInput
    /**
     * In case the ChitScheme found by the `where` argument doesn't exist, create a new ChitScheme with this data.
     */
    create: XOR<ChitSchemeCreateInput, ChitSchemeUncheckedCreateInput>
    /**
     * In case the ChitScheme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChitSchemeUpdateInput, ChitSchemeUncheckedUpdateInput>
  }

  /**
   * ChitScheme delete
   */
  export type ChitSchemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
    /**
     * Filter which ChitScheme to delete.
     */
    where: ChitSchemeWhereUniqueInput
  }

  /**
   * ChitScheme deleteMany
   */
  export type ChitSchemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChitSchemes to delete
     */
    where?: ChitSchemeWhereInput
  }

  /**
   * ChitScheme.customerSchemes
   */
  export type ChitScheme$customerSchemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    where?: CustomerSchemeWhereInput
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    cursor?: CustomerSchemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerSchemeScalarFieldEnum | CustomerSchemeScalarFieldEnum[]
  }

  /**
   * ChitScheme.auctions
   */
  export type ChitScheme$auctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    cursor?: AuctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * ChitScheme.creator
   */
  export type ChitScheme$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChitScheme without action
   */
  export type ChitSchemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChitScheme
     */
    select?: ChitSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChitSchemeInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    amountPerDay: number | null
    duration: number | null
    balance: number | null
  }

  export type CustomerSumAggregateOutputType = {
    amountPerDay: number | null
    duration: number | null
    balance: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    name: string | null
    mobile: string | null
    address: string | null
    startDate: Date | null
    lastDate: Date | null
    amountPerDay: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    status: $Enums.CustomerStatus | null
    balance: number | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    mobile: string | null
    address: string | null
    startDate: Date | null
    lastDate: Date | null
    amountPerDay: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    status: $Enums.CustomerStatus | null
    balance: number | null
    photo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    mobile: number
    address: number
    startDate: number
    lastDate: number
    amountPerDay: number
    duration: number
    durationType: number
    status: number
    balance: number
    photo: number
    documents: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    amountPerDay?: true
    duration?: true
    balance?: true
  }

  export type CustomerSumAggregateInputType = {
    amountPerDay?: true
    duration?: true
    balance?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    mobile?: true
    address?: true
    startDate?: true
    lastDate?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    status?: true
    balance?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    mobile?: true
    address?: true
    startDate?: true
    lastDate?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    status?: true
    balance?: true
    photo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    mobile?: true
    address?: true
    startDate?: true
    lastDate?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    status?: true
    balance?: true
    photo?: true
    documents?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    name: string
    mobile: string
    address: string
    startDate: Date
    lastDate: Date | null
    amountPerDay: number
    duration: number
    durationType: $Enums.DurationType
    status: $Enums.CustomerStatus
    balance: number
    photo: string | null
    documents: string[]
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mobile?: boolean
    address?: boolean
    startDate?: boolean
    lastDate?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    status?: boolean
    balance?: boolean
    photo?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    schemes?: boolean | Customer$schemesArgs<ExtArgs>
    collections?: boolean | Customer$collectionsArgs<ExtArgs>
    wonAuctions?: boolean | Customer$wonAuctionsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mobile?: boolean
    address?: boolean
    startDate?: boolean
    lastDate?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    status?: boolean
    balance?: boolean
    photo?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    mobile?: boolean
    address?: boolean
    startDate?: boolean
    lastDate?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    status?: boolean
    balance?: boolean
    photo?: boolean
    documents?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schemes?: boolean | Customer$schemesArgs<ExtArgs>
    collections?: boolean | Customer$collectionsArgs<ExtArgs>
    wonAuctions?: boolean | Customer$wonAuctionsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      schemes: Prisma.$CustomerSchemePayload<ExtArgs>[]
      collections: Prisma.$CollectionPayload<ExtArgs>[]
      wonAuctions: Prisma.$AuctionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      mobile: string
      address: string
      startDate: Date
      lastDate: Date | null
      amountPerDay: number
      duration: number
      durationType: $Enums.DurationType
      status: $Enums.CustomerStatus
      balance: number
      photo: string | null
      documents: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schemes<T extends Customer$schemesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$schemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findMany"> | Null>
    collections<T extends Customer$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany"> | Null>
    wonAuctions<T extends Customer$wonAuctionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$wonAuctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly mobile: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly startDate: FieldRef<"Customer", 'DateTime'>
    readonly lastDate: FieldRef<"Customer", 'DateTime'>
    readonly amountPerDay: FieldRef<"Customer", 'Int'>
    readonly duration: FieldRef<"Customer", 'Int'>
    readonly durationType: FieldRef<"Customer", 'DurationType'>
    readonly status: FieldRef<"Customer", 'CustomerStatus'>
    readonly balance: FieldRef<"Customer", 'Int'>
    readonly photo: FieldRef<"Customer", 'String'>
    readonly documents: FieldRef<"Customer", 'String[]'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.schemes
   */
  export type Customer$schemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    where?: CustomerSchemeWhereInput
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    cursor?: CustomerSchemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerSchemeScalarFieldEnum | CustomerSchemeScalarFieldEnum[]
  }

  /**
   * Customer.collections
   */
  export type Customer$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    cursor?: CollectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Customer.wonAuctions
   */
  export type Customer$wonAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    cursor?: AuctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model CustomerScheme
   */

  export type AggregateCustomerScheme = {
    _count: CustomerSchemeCountAggregateOutputType | null
    _avg: CustomerSchemeAvgAggregateOutputType | null
    _sum: CustomerSchemeSumAggregateOutputType | null
    _min: CustomerSchemeMinAggregateOutputType | null
    _max: CustomerSchemeMaxAggregateOutputType | null
  }

  export type CustomerSchemeAvgAggregateOutputType = {
    amountPerDay: number | null
    duration: number | null
    balance: number | null
  }

  export type CustomerSchemeSumAggregateOutputType = {
    amountPerDay: number | null
    duration: number | null
    balance: number | null
  }

  export type CustomerSchemeMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    schemeId: string | null
    enrolledAt: Date | null
    status: $Enums.CustomerStatus | null
    amountPerDay: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    startDate: Date | null
    lastDate: Date | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerSchemeMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    schemeId: string | null
    enrolledAt: Date | null
    status: $Enums.CustomerStatus | null
    amountPerDay: number | null
    duration: number | null
    durationType: $Enums.DurationType | null
    startDate: Date | null
    lastDate: Date | null
    balance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerSchemeCountAggregateOutputType = {
    id: number
    customerId: number
    schemeId: number
    enrolledAt: number
    status: number
    amountPerDay: number
    duration: number
    durationType: number
    startDate: number
    lastDate: number
    balance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerSchemeAvgAggregateInputType = {
    amountPerDay?: true
    duration?: true
    balance?: true
  }

  export type CustomerSchemeSumAggregateInputType = {
    amountPerDay?: true
    duration?: true
    balance?: true
  }

  export type CustomerSchemeMinAggregateInputType = {
    id?: true
    customerId?: true
    schemeId?: true
    enrolledAt?: true
    status?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    startDate?: true
    lastDate?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerSchemeMaxAggregateInputType = {
    id?: true
    customerId?: true
    schemeId?: true
    enrolledAt?: true
    status?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    startDate?: true
    lastDate?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerSchemeCountAggregateInputType = {
    id?: true
    customerId?: true
    schemeId?: true
    enrolledAt?: true
    status?: true
    amountPerDay?: true
    duration?: true
    durationType?: true
    startDate?: true
    lastDate?: true
    balance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerSchemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerScheme to aggregate.
     */
    where?: CustomerSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSchemes to fetch.
     */
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerSchemes
    **/
    _count?: true | CustomerSchemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerSchemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSchemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerSchemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerSchemeMaxAggregateInputType
  }

  export type GetCustomerSchemeAggregateType<T extends CustomerSchemeAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerScheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerScheme[P]>
      : GetScalarType<T[P], AggregateCustomerScheme[P]>
  }




  export type CustomerSchemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSchemeWhereInput
    orderBy?: CustomerSchemeOrderByWithAggregationInput | CustomerSchemeOrderByWithAggregationInput[]
    by: CustomerSchemeScalarFieldEnum[] | CustomerSchemeScalarFieldEnum
    having?: CustomerSchemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerSchemeCountAggregateInputType | true
    _avg?: CustomerSchemeAvgAggregateInputType
    _sum?: CustomerSchemeSumAggregateInputType
    _min?: CustomerSchemeMinAggregateInputType
    _max?: CustomerSchemeMaxAggregateInputType
  }

  export type CustomerSchemeGroupByOutputType = {
    id: string
    customerId: string
    schemeId: string
    enrolledAt: Date
    status: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType: $Enums.DurationType
    startDate: Date
    lastDate: Date | null
    balance: number
    createdAt: Date
    updatedAt: Date
    _count: CustomerSchemeCountAggregateOutputType | null
    _avg: CustomerSchemeAvgAggregateOutputType | null
    _sum: CustomerSchemeSumAggregateOutputType | null
    _min: CustomerSchemeMinAggregateOutputType | null
    _max: CustomerSchemeMaxAggregateOutputType | null
  }

  type GetCustomerSchemeGroupByPayload<T extends CustomerSchemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerSchemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerSchemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerSchemeGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerSchemeGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSchemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    schemeId?: boolean
    enrolledAt?: boolean
    status?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    startDate?: boolean
    lastDate?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    scheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    passbookEntries?: boolean | CustomerScheme$passbookEntriesArgs<ExtArgs>
    _count?: boolean | CustomerSchemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerScheme"]>

  export type CustomerSchemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    schemeId?: boolean
    enrolledAt?: boolean
    status?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    startDate?: boolean
    lastDate?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    scheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerScheme"]>

  export type CustomerSchemeSelectScalar = {
    id?: boolean
    customerId?: boolean
    schemeId?: boolean
    enrolledAt?: boolean
    status?: boolean
    amountPerDay?: boolean
    duration?: boolean
    durationType?: boolean
    startDate?: boolean
    lastDate?: boolean
    balance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerSchemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    scheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    passbookEntries?: boolean | CustomerScheme$passbookEntriesArgs<ExtArgs>
    _count?: boolean | CustomerSchemeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerSchemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    scheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
  }

  export type $CustomerSchemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerScheme"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      scheme: Prisma.$ChitSchemePayload<ExtArgs>
      passbookEntries: Prisma.$PassbookEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      schemeId: string
      enrolledAt: Date
      status: $Enums.CustomerStatus
      amountPerDay: number
      duration: number
      durationType: $Enums.DurationType
      startDate: Date
      lastDate: Date | null
      balance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerScheme"]>
    composites: {}
  }

  type CustomerSchemeGetPayload<S extends boolean | null | undefined | CustomerSchemeDefaultArgs> = $Result.GetResult<Prisma.$CustomerSchemePayload, S>

  type CustomerSchemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerSchemeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerSchemeCountAggregateInputType | true
    }

  export interface CustomerSchemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerScheme'], meta: { name: 'CustomerScheme' } }
    /**
     * Find zero or one CustomerScheme that matches the filter.
     * @param {CustomerSchemeFindUniqueArgs} args - Arguments to find a CustomerScheme
     * @example
     * // Get one CustomerScheme
     * const customerScheme = await prisma.customerScheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerSchemeFindUniqueArgs>(args: SelectSubset<T, CustomerSchemeFindUniqueArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CustomerScheme that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerSchemeFindUniqueOrThrowArgs} args - Arguments to find a CustomerScheme
     * @example
     * // Get one CustomerScheme
     * const customerScheme = await prisma.customerScheme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerSchemeFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerSchemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CustomerScheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeFindFirstArgs} args - Arguments to find a CustomerScheme
     * @example
     * // Get one CustomerScheme
     * const customerScheme = await prisma.customerScheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerSchemeFindFirstArgs>(args?: SelectSubset<T, CustomerSchemeFindFirstArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CustomerScheme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeFindFirstOrThrowArgs} args - Arguments to find a CustomerScheme
     * @example
     * // Get one CustomerScheme
     * const customerScheme = await prisma.customerScheme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerSchemeFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerSchemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CustomerSchemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerSchemes
     * const customerSchemes = await prisma.customerScheme.findMany()
     * 
     * // Get first 10 CustomerSchemes
     * const customerSchemes = await prisma.customerScheme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerSchemeWithIdOnly = await prisma.customerScheme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerSchemeFindManyArgs>(args?: SelectSubset<T, CustomerSchemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CustomerScheme.
     * @param {CustomerSchemeCreateArgs} args - Arguments to create a CustomerScheme.
     * @example
     * // Create one CustomerScheme
     * const CustomerScheme = await prisma.customerScheme.create({
     *   data: {
     *     // ... data to create a CustomerScheme
     *   }
     * })
     * 
     */
    create<T extends CustomerSchemeCreateArgs>(args: SelectSubset<T, CustomerSchemeCreateArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CustomerSchemes.
     * @param {CustomerSchemeCreateManyArgs} args - Arguments to create many CustomerSchemes.
     * @example
     * // Create many CustomerSchemes
     * const customerScheme = await prisma.customerScheme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerSchemeCreateManyArgs>(args?: SelectSubset<T, CustomerSchemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerSchemes and returns the data saved in the database.
     * @param {CustomerSchemeCreateManyAndReturnArgs} args - Arguments to create many CustomerSchemes.
     * @example
     * // Create many CustomerSchemes
     * const customerScheme = await prisma.customerScheme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerSchemes and only return the `id`
     * const customerSchemeWithIdOnly = await prisma.customerScheme.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerSchemeCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerSchemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CustomerScheme.
     * @param {CustomerSchemeDeleteArgs} args - Arguments to delete one CustomerScheme.
     * @example
     * // Delete one CustomerScheme
     * const CustomerScheme = await prisma.customerScheme.delete({
     *   where: {
     *     // ... filter to delete one CustomerScheme
     *   }
     * })
     * 
     */
    delete<T extends CustomerSchemeDeleteArgs>(args: SelectSubset<T, CustomerSchemeDeleteArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CustomerScheme.
     * @param {CustomerSchemeUpdateArgs} args - Arguments to update one CustomerScheme.
     * @example
     * // Update one CustomerScheme
     * const customerScheme = await prisma.customerScheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerSchemeUpdateArgs>(args: SelectSubset<T, CustomerSchemeUpdateArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CustomerSchemes.
     * @param {CustomerSchemeDeleteManyArgs} args - Arguments to filter CustomerSchemes to delete.
     * @example
     * // Delete a few CustomerSchemes
     * const { count } = await prisma.customerScheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerSchemeDeleteManyArgs>(args?: SelectSubset<T, CustomerSchemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerSchemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerSchemes
     * const customerScheme = await prisma.customerScheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerSchemeUpdateManyArgs>(args: SelectSubset<T, CustomerSchemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerScheme.
     * @param {CustomerSchemeUpsertArgs} args - Arguments to update or create a CustomerScheme.
     * @example
     * // Update or create a CustomerScheme
     * const customerScheme = await prisma.customerScheme.upsert({
     *   create: {
     *     // ... data to create a CustomerScheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerScheme we want to update
     *   }
     * })
     */
    upsert<T extends CustomerSchemeUpsertArgs>(args: SelectSubset<T, CustomerSchemeUpsertArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CustomerSchemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeCountArgs} args - Arguments to filter CustomerSchemes to count.
     * @example
     * // Count the number of CustomerSchemes
     * const count = await prisma.customerScheme.count({
     *   where: {
     *     // ... the filter for the CustomerSchemes we want to count
     *   }
     * })
    **/
    count<T extends CustomerSchemeCountArgs>(
      args?: Subset<T, CustomerSchemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerSchemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerScheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerSchemeAggregateArgs>(args: Subset<T, CustomerSchemeAggregateArgs>): Prisma.PrismaPromise<GetCustomerSchemeAggregateType<T>>

    /**
     * Group by CustomerScheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSchemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerSchemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerSchemeGroupByArgs['orderBy'] }
        : { orderBy?: CustomerSchemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerSchemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerSchemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerScheme model
   */
  readonly fields: CustomerSchemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerScheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerSchemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    scheme<T extends ChitSchemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChitSchemeDefaultArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    passbookEntries<T extends CustomerScheme$passbookEntriesArgs<ExtArgs> = {}>(args?: Subset<T, CustomerScheme$passbookEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerScheme model
   */ 
  interface CustomerSchemeFieldRefs {
    readonly id: FieldRef<"CustomerScheme", 'String'>
    readonly customerId: FieldRef<"CustomerScheme", 'String'>
    readonly schemeId: FieldRef<"CustomerScheme", 'String'>
    readonly enrolledAt: FieldRef<"CustomerScheme", 'DateTime'>
    readonly status: FieldRef<"CustomerScheme", 'CustomerStatus'>
    readonly amountPerDay: FieldRef<"CustomerScheme", 'Int'>
    readonly duration: FieldRef<"CustomerScheme", 'Int'>
    readonly durationType: FieldRef<"CustomerScheme", 'DurationType'>
    readonly startDate: FieldRef<"CustomerScheme", 'DateTime'>
    readonly lastDate: FieldRef<"CustomerScheme", 'DateTime'>
    readonly balance: FieldRef<"CustomerScheme", 'Int'>
    readonly createdAt: FieldRef<"CustomerScheme", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerScheme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerScheme findUnique
   */
  export type CustomerSchemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter, which CustomerScheme to fetch.
     */
    where: CustomerSchemeWhereUniqueInput
  }

  /**
   * CustomerScheme findUniqueOrThrow
   */
  export type CustomerSchemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter, which CustomerScheme to fetch.
     */
    where: CustomerSchemeWhereUniqueInput
  }

  /**
   * CustomerScheme findFirst
   */
  export type CustomerSchemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter, which CustomerScheme to fetch.
     */
    where?: CustomerSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSchemes to fetch.
     */
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSchemes.
     */
    cursor?: CustomerSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSchemes.
     */
    distinct?: CustomerSchemeScalarFieldEnum | CustomerSchemeScalarFieldEnum[]
  }

  /**
   * CustomerScheme findFirstOrThrow
   */
  export type CustomerSchemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter, which CustomerScheme to fetch.
     */
    where?: CustomerSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSchemes to fetch.
     */
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSchemes.
     */
    cursor?: CustomerSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSchemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSchemes.
     */
    distinct?: CustomerSchemeScalarFieldEnum | CustomerSchemeScalarFieldEnum[]
  }

  /**
   * CustomerScheme findMany
   */
  export type CustomerSchemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSchemes to fetch.
     */
    where?: CustomerSchemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSchemes to fetch.
     */
    orderBy?: CustomerSchemeOrderByWithRelationInput | CustomerSchemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerSchemes.
     */
    cursor?: CustomerSchemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSchemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSchemes.
     */
    skip?: number
    distinct?: CustomerSchemeScalarFieldEnum | CustomerSchemeScalarFieldEnum[]
  }

  /**
   * CustomerScheme create
   */
  export type CustomerSchemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerScheme.
     */
    data: XOR<CustomerSchemeCreateInput, CustomerSchemeUncheckedCreateInput>
  }

  /**
   * CustomerScheme createMany
   */
  export type CustomerSchemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerSchemes.
     */
    data: CustomerSchemeCreateManyInput | CustomerSchemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerScheme createManyAndReturn
   */
  export type CustomerSchemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CustomerSchemes.
     */
    data: CustomerSchemeCreateManyInput | CustomerSchemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerScheme update
   */
  export type CustomerSchemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerScheme.
     */
    data: XOR<CustomerSchemeUpdateInput, CustomerSchemeUncheckedUpdateInput>
    /**
     * Choose, which CustomerScheme to update.
     */
    where: CustomerSchemeWhereUniqueInput
  }

  /**
   * CustomerScheme updateMany
   */
  export type CustomerSchemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerSchemes.
     */
    data: XOR<CustomerSchemeUpdateManyMutationInput, CustomerSchemeUncheckedUpdateManyInput>
    /**
     * Filter which CustomerSchemes to update
     */
    where?: CustomerSchemeWhereInput
  }

  /**
   * CustomerScheme upsert
   */
  export type CustomerSchemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerScheme to update in case it exists.
     */
    where: CustomerSchemeWhereUniqueInput
    /**
     * In case the CustomerScheme found by the `where` argument doesn't exist, create a new CustomerScheme with this data.
     */
    create: XOR<CustomerSchemeCreateInput, CustomerSchemeUncheckedCreateInput>
    /**
     * In case the CustomerScheme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerSchemeUpdateInput, CustomerSchemeUncheckedUpdateInput>
  }

  /**
   * CustomerScheme delete
   */
  export type CustomerSchemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
    /**
     * Filter which CustomerScheme to delete.
     */
    where: CustomerSchemeWhereUniqueInput
  }

  /**
   * CustomerScheme deleteMany
   */
  export type CustomerSchemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerSchemes to delete
     */
    where?: CustomerSchemeWhereInput
  }

  /**
   * CustomerScheme.passbookEntries
   */
  export type CustomerScheme$passbookEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    where?: PassbookEntryWhereInput
    orderBy?: PassbookEntryOrderByWithRelationInput | PassbookEntryOrderByWithRelationInput[]
    cursor?: PassbookEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PassbookEntryScalarFieldEnum | PassbookEntryScalarFieldEnum[]
  }

  /**
   * CustomerScheme without action
   */
  export type CustomerSchemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerScheme
     */
    select?: CustomerSchemeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSchemeInclude<ExtArgs> | null
  }


  /**
   * Model Collection
   */

  export type AggregateCollection = {
    _count: CollectionCountAggregateOutputType | null
    _avg: CollectionAvgAggregateOutputType | null
    _sum: CollectionSumAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  export type CollectionAvgAggregateOutputType = {
    amountPaid: number | null
    balanceRemaining: number | null
  }

  export type CollectionSumAggregateOutputType = {
    amountPaid: number | null
    balanceRemaining: number | null
  }

  export type CollectionMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    amountPaid: number | null
    collectorId: string | null
    date: Date | null
    balanceRemaining: number | null
    paymentMethod: $Enums.PaymentMethod | null
    remarks: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollectionMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    amountPaid: number | null
    collectorId: string | null
    date: Date | null
    balanceRemaining: number | null
    paymentMethod: $Enums.PaymentMethod | null
    remarks: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollectionCountAggregateOutputType = {
    id: number
    customerId: number
    amountPaid: number
    collectorId: number
    date: number
    balanceRemaining: number
    paymentMethod: number
    remarks: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CollectionAvgAggregateInputType = {
    amountPaid?: true
    balanceRemaining?: true
  }

  export type CollectionSumAggregateInputType = {
    amountPaid?: true
    balanceRemaining?: true
  }

  export type CollectionMinAggregateInputType = {
    id?: true
    customerId?: true
    amountPaid?: true
    collectorId?: true
    date?: true
    balanceRemaining?: true
    paymentMethod?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollectionMaxAggregateInputType = {
    id?: true
    customerId?: true
    amountPaid?: true
    collectorId?: true
    date?: true
    balanceRemaining?: true
    paymentMethod?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollectionCountAggregateInputType = {
    id?: true
    customerId?: true
    amountPaid?: true
    collectorId?: true
    date?: true
    balanceRemaining?: true
    paymentMethod?: true
    remarks?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CollectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collection to aggregate.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Collections
    **/
    _count?: true | CollectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollectionMaxAggregateInputType
  }

  export type GetCollectionAggregateType<T extends CollectionAggregateArgs> = {
        [P in keyof T & keyof AggregateCollection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollection[P]>
      : GetScalarType<T[P], AggregateCollection[P]>
  }




  export type CollectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollectionWhereInput
    orderBy?: CollectionOrderByWithAggregationInput | CollectionOrderByWithAggregationInput[]
    by: CollectionScalarFieldEnum[] | CollectionScalarFieldEnum
    having?: CollectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollectionCountAggregateInputType | true
    _avg?: CollectionAvgAggregateInputType
    _sum?: CollectionSumAggregateInputType
    _min?: CollectionMinAggregateInputType
    _max?: CollectionMaxAggregateInputType
  }

  export type CollectionGroupByOutputType = {
    id: string
    customerId: string
    amountPaid: number
    collectorId: string
    date: Date
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks: string | null
    createdAt: Date
    updatedAt: Date
    _count: CollectionCountAggregateOutputType | null
    _avg: CollectionAvgAggregateOutputType | null
    _sum: CollectionSumAggregateOutputType | null
    _min: CollectionMinAggregateOutputType | null
    _max: CollectionMaxAggregateOutputType | null
  }

  type GetCollectionGroupByPayload<T extends CollectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollectionGroupByOutputType[P]>
            : GetScalarType<T[P], CollectionGroupByOutputType[P]>
        }
      >
    >


  export type CollectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    amountPaid?: boolean
    collectorId?: boolean
    date?: boolean
    balanceRemaining?: boolean
    paymentMethod?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    collector?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    amountPaid?: boolean
    collectorId?: boolean
    date?: boolean
    balanceRemaining?: boolean
    paymentMethod?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    collector?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collection"]>

  export type CollectionSelectScalar = {
    id?: boolean
    customerId?: boolean
    amountPaid?: boolean
    collectorId?: boolean
    date?: boolean
    balanceRemaining?: boolean
    paymentMethod?: boolean
    remarks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CollectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    collector?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CollectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    collector?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CollectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Collection"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      collector: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      amountPaid: number
      collectorId: string
      date: Date
      balanceRemaining: number
      paymentMethod: $Enums.PaymentMethod
      remarks: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["collection"]>
    composites: {}
  }

  type CollectionGetPayload<S extends boolean | null | undefined | CollectionDefaultArgs> = $Result.GetResult<Prisma.$CollectionPayload, S>

  type CollectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollectionCountAggregateInputType | true
    }

  export interface CollectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Collection'], meta: { name: 'Collection' } }
    /**
     * Find zero or one Collection that matches the filter.
     * @param {CollectionFindUniqueArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollectionFindUniqueArgs>(args: SelectSubset<T, CollectionFindUniqueArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Collection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollectionFindUniqueOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollectionFindUniqueOrThrowArgs>(args: SelectSubset<T, CollectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Collection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollectionFindFirstArgs>(args?: SelectSubset<T, CollectionFindFirstArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Collection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindFirstOrThrowArgs} args - Arguments to find a Collection
     * @example
     * // Get one Collection
     * const collection = await prisma.collection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollectionFindFirstOrThrowArgs>(args?: SelectSubset<T, CollectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Collections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collections
     * const collections = await prisma.collection.findMany()
     * 
     * // Get first 10 Collections
     * const collections = await prisma.collection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collectionWithIdOnly = await prisma.collection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollectionFindManyArgs>(args?: SelectSubset<T, CollectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Collection.
     * @param {CollectionCreateArgs} args - Arguments to create a Collection.
     * @example
     * // Create one Collection
     * const Collection = await prisma.collection.create({
     *   data: {
     *     // ... data to create a Collection
     *   }
     * })
     * 
     */
    create<T extends CollectionCreateArgs>(args: SelectSubset<T, CollectionCreateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Collections.
     * @param {CollectionCreateManyArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollectionCreateManyArgs>(args?: SelectSubset<T, CollectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Collections and returns the data saved in the database.
     * @param {CollectionCreateManyAndReturnArgs} args - Arguments to create many Collections.
     * @example
     * // Create many Collections
     * const collection = await prisma.collection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Collections and only return the `id`
     * const collectionWithIdOnly = await prisma.collection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollectionCreateManyAndReturnArgs>(args?: SelectSubset<T, CollectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Collection.
     * @param {CollectionDeleteArgs} args - Arguments to delete one Collection.
     * @example
     * // Delete one Collection
     * const Collection = await prisma.collection.delete({
     *   where: {
     *     // ... filter to delete one Collection
     *   }
     * })
     * 
     */
    delete<T extends CollectionDeleteArgs>(args: SelectSubset<T, CollectionDeleteArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Collection.
     * @param {CollectionUpdateArgs} args - Arguments to update one Collection.
     * @example
     * // Update one Collection
     * const collection = await prisma.collection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollectionUpdateArgs>(args: SelectSubset<T, CollectionUpdateArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Collections.
     * @param {CollectionDeleteManyArgs} args - Arguments to filter Collections to delete.
     * @example
     * // Delete a few Collections
     * const { count } = await prisma.collection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollectionDeleteManyArgs>(args?: SelectSubset<T, CollectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collections
     * const collection = await prisma.collection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollectionUpdateManyArgs>(args: SelectSubset<T, CollectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Collection.
     * @param {CollectionUpsertArgs} args - Arguments to update or create a Collection.
     * @example
     * // Update or create a Collection
     * const collection = await prisma.collection.upsert({
     *   create: {
     *     // ... data to create a Collection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collection we want to update
     *   }
     * })
     */
    upsert<T extends CollectionUpsertArgs>(args: SelectSubset<T, CollectionUpsertArgs<ExtArgs>>): Prisma__CollectionClient<$Result.GetResult<Prisma.$CollectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Collections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionCountArgs} args - Arguments to filter Collections to count.
     * @example
     * // Count the number of Collections
     * const count = await prisma.collection.count({
     *   where: {
     *     // ... the filter for the Collections we want to count
     *   }
     * })
    **/
    count<T extends CollectionCountArgs>(
      args?: Subset<T, CollectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollectionAggregateArgs>(args: Subset<T, CollectionAggregateArgs>): Prisma.PrismaPromise<GetCollectionAggregateType<T>>

    /**
     * Group by Collection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollectionGroupByArgs['orderBy'] }
        : { orderBy?: CollectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Collection model
   */
  readonly fields: CollectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Collection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    collector<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Collection model
   */ 
  interface CollectionFieldRefs {
    readonly id: FieldRef<"Collection", 'String'>
    readonly customerId: FieldRef<"Collection", 'String'>
    readonly amountPaid: FieldRef<"Collection", 'Int'>
    readonly collectorId: FieldRef<"Collection", 'String'>
    readonly date: FieldRef<"Collection", 'DateTime'>
    readonly balanceRemaining: FieldRef<"Collection", 'Int'>
    readonly paymentMethod: FieldRef<"Collection", 'PaymentMethod'>
    readonly remarks: FieldRef<"Collection", 'String'>
    readonly createdAt: FieldRef<"Collection", 'DateTime'>
    readonly updatedAt: FieldRef<"Collection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Collection findUnique
   */
  export type CollectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findUniqueOrThrow
   */
  export type CollectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection findFirst
   */
  export type CollectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findFirstOrThrow
   */
  export type CollectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collection to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Collections.
     */
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection findMany
   */
  export type CollectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter, which Collections to fetch.
     */
    where?: CollectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Collections to fetch.
     */
    orderBy?: CollectionOrderByWithRelationInput | CollectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Collections.
     */
    cursor?: CollectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Collections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Collections.
     */
    skip?: number
    distinct?: CollectionScalarFieldEnum | CollectionScalarFieldEnum[]
  }

  /**
   * Collection create
   */
  export type CollectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Collection.
     */
    data: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
  }

  /**
   * Collection createMany
   */
  export type CollectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Collection createManyAndReturn
   */
  export type CollectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Collections.
     */
    data: CollectionCreateManyInput | CollectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Collection update
   */
  export type CollectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Collection.
     */
    data: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
    /**
     * Choose, which Collection to update.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection updateMany
   */
  export type CollectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Collections.
     */
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyInput>
    /**
     * Filter which Collections to update
     */
    where?: CollectionWhereInput
  }

  /**
   * Collection upsert
   */
  export type CollectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Collection to update in case it exists.
     */
    where: CollectionWhereUniqueInput
    /**
     * In case the Collection found by the `where` argument doesn't exist, create a new Collection with this data.
     */
    create: XOR<CollectionCreateInput, CollectionUncheckedCreateInput>
    /**
     * In case the Collection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollectionUpdateInput, CollectionUncheckedUpdateInput>
  }

  /**
   * Collection delete
   */
  export type CollectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
    /**
     * Filter which Collection to delete.
     */
    where: CollectionWhereUniqueInput
  }

  /**
   * Collection deleteMany
   */
  export type CollectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Collections to delete
     */
    where?: CollectionWhereInput
  }

  /**
   * Collection without action
   */
  export type CollectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Collection
     */
    select?: CollectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollectionInclude<ExtArgs> | null
  }


  /**
   * Model Auction
   */

  export type AggregateAuction = {
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  export type AuctionAvgAggregateOutputType = {
    amountReceived: number | null
    discountAmount: number | null
    newDailyPayment: number | null
    previousDailyPayment: number | null
  }

  export type AuctionSumAggregateOutputType = {
    amountReceived: number | null
    discountAmount: number | null
    newDailyPayment: number | null
    previousDailyPayment: number | null
  }

  export type AuctionMinAggregateOutputType = {
    id: string | null
    chitSchemeId: string | null
    auctionDate: Date | null
    winningMemberId: string | null
    amountReceived: number | null
    discountAmount: number | null
    newDailyPayment: number | null
    previousDailyPayment: number | null
    status: $Enums.AuctionStatus | null
    remarks: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionMaxAggregateOutputType = {
    id: string | null
    chitSchemeId: string | null
    auctionDate: Date | null
    winningMemberId: string | null
    amountReceived: number | null
    discountAmount: number | null
    newDailyPayment: number | null
    previousDailyPayment: number | null
    status: $Enums.AuctionStatus | null
    remarks: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuctionCountAggregateOutputType = {
    id: number
    chitSchemeId: number
    auctionDate: number
    winningMemberId: number
    amountReceived: number
    discountAmount: number
    newDailyPayment: number
    previousDailyPayment: number
    status: number
    remarks: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuctionAvgAggregateInputType = {
    amountReceived?: true
    discountAmount?: true
    newDailyPayment?: true
    previousDailyPayment?: true
  }

  export type AuctionSumAggregateInputType = {
    amountReceived?: true
    discountAmount?: true
    newDailyPayment?: true
    previousDailyPayment?: true
  }

  export type AuctionMinAggregateInputType = {
    id?: true
    chitSchemeId?: true
    auctionDate?: true
    winningMemberId?: true
    amountReceived?: true
    discountAmount?: true
    newDailyPayment?: true
    previousDailyPayment?: true
    status?: true
    remarks?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionMaxAggregateInputType = {
    id?: true
    chitSchemeId?: true
    auctionDate?: true
    winningMemberId?: true
    amountReceived?: true
    discountAmount?: true
    newDailyPayment?: true
    previousDailyPayment?: true
    status?: true
    remarks?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuctionCountAggregateInputType = {
    id?: true
    chitSchemeId?: true
    auctionDate?: true
    winningMemberId?: true
    amountReceived?: true
    discountAmount?: true
    newDailyPayment?: true
    previousDailyPayment?: true
    status?: true
    remarks?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auction to aggregate.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auctions
    **/
    _count?: true | AuctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionMaxAggregateInputType
  }

  export type GetAuctionAggregateType<T extends AuctionAggregateArgs> = {
        [P in keyof T & keyof AggregateAuction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuction[P]>
      : GetScalarType<T[P], AggregateAuction[P]>
  }




  export type AuctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithAggregationInput | AuctionOrderByWithAggregationInput[]
    by: AuctionScalarFieldEnum[] | AuctionScalarFieldEnum
    having?: AuctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionCountAggregateInputType | true
    _avg?: AuctionAvgAggregateInputType
    _sum?: AuctionSumAggregateInputType
    _min?: AuctionMinAggregateInputType
    _max?: AuctionMaxAggregateInputType
  }

  export type AuctionGroupByOutputType = {
    id: string
    chitSchemeId: string
    auctionDate: Date
    winningMemberId: string | null
    amountReceived: number
    discountAmount: number
    newDailyPayment: number | null
    previousDailyPayment: number | null
    status: $Enums.AuctionStatus
    remarks: string | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  type GetAuctionGroupByPayload<T extends AuctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionGroupByOutputType[P]>
        }
      >
    >


  export type AuctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chitSchemeId?: boolean
    auctionDate?: boolean
    winningMemberId?: boolean
    amountReceived?: boolean
    discountAmount?: boolean
    newDailyPayment?: boolean
    previousDailyPayment?: boolean
    status?: boolean
    remarks?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chitScheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    winningMember?: boolean | Auction$winningMemberArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chitSchemeId?: boolean
    auctionDate?: boolean
    winningMemberId?: boolean
    amountReceived?: boolean
    discountAmount?: boolean
    newDailyPayment?: boolean
    previousDailyPayment?: boolean
    status?: boolean
    remarks?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chitScheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    winningMember?: boolean | Auction$winningMemberArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectScalar = {
    id?: boolean
    chitSchemeId?: boolean
    auctionDate?: boolean
    winningMemberId?: boolean
    amountReceived?: boolean
    discountAmount?: boolean
    newDailyPayment?: boolean
    previousDailyPayment?: boolean
    status?: boolean
    remarks?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chitScheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    winningMember?: boolean | Auction$winningMemberArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chitScheme?: boolean | ChitSchemeDefaultArgs<ExtArgs>
    winningMember?: boolean | Auction$winningMemberArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auction"
    objects: {
      chitScheme: Prisma.$ChitSchemePayload<ExtArgs>
      winningMember: Prisma.$CustomerPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      chitSchemeId: string
      auctionDate: Date
      winningMemberId: string | null
      amountReceived: number
      discountAmount: number
      newDailyPayment: number | null
      previousDailyPayment: number | null
      status: $Enums.AuctionStatus
      remarks: string | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["auction"]>
    composites: {}
  }

  type AuctionGetPayload<S extends boolean | null | undefined | AuctionDefaultArgs> = $Result.GetResult<Prisma.$AuctionPayload, S>

  type AuctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuctionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuctionCountAggregateInputType | true
    }

  export interface AuctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auction'], meta: { name: 'Auction' } }
    /**
     * Find zero or one Auction that matches the filter.
     * @param {AuctionFindUniqueArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuctionFindUniqueArgs>(args: SelectSubset<T, AuctionFindUniqueArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Auction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuctionFindUniqueOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuctionFindUniqueOrThrowArgs>(args: SelectSubset<T, AuctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Auction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuctionFindFirstArgs>(args?: SelectSubset<T, AuctionFindFirstArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Auction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuctionFindFirstOrThrowArgs>(args?: SelectSubset<T, AuctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Auctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auctions
     * const auctions = await prisma.auction.findMany()
     * 
     * // Get first 10 Auctions
     * const auctions = await prisma.auction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auctionWithIdOnly = await prisma.auction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuctionFindManyArgs>(args?: SelectSubset<T, AuctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Auction.
     * @param {AuctionCreateArgs} args - Arguments to create a Auction.
     * @example
     * // Create one Auction
     * const Auction = await prisma.auction.create({
     *   data: {
     *     // ... data to create a Auction
     *   }
     * })
     * 
     */
    create<T extends AuctionCreateArgs>(args: SelectSubset<T, AuctionCreateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Auctions.
     * @param {AuctionCreateManyArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuctionCreateManyArgs>(args?: SelectSubset<T, AuctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auctions and returns the data saved in the database.
     * @param {AuctionCreateManyAndReturnArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auctions and only return the `id`
     * const auctionWithIdOnly = await prisma.auction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuctionCreateManyAndReturnArgs>(args?: SelectSubset<T, AuctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Auction.
     * @param {AuctionDeleteArgs} args - Arguments to delete one Auction.
     * @example
     * // Delete one Auction
     * const Auction = await prisma.auction.delete({
     *   where: {
     *     // ... filter to delete one Auction
     *   }
     * })
     * 
     */
    delete<T extends AuctionDeleteArgs>(args: SelectSubset<T, AuctionDeleteArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Auction.
     * @param {AuctionUpdateArgs} args - Arguments to update one Auction.
     * @example
     * // Update one Auction
     * const auction = await prisma.auction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuctionUpdateArgs>(args: SelectSubset<T, AuctionUpdateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Auctions.
     * @param {AuctionDeleteManyArgs} args - Arguments to filter Auctions to delete.
     * @example
     * // Delete a few Auctions
     * const { count } = await prisma.auction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuctionDeleteManyArgs>(args?: SelectSubset<T, AuctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auctions
     * const auction = await prisma.auction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuctionUpdateManyArgs>(args: SelectSubset<T, AuctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auction.
     * @param {AuctionUpsertArgs} args - Arguments to update or create a Auction.
     * @example
     * // Update or create a Auction
     * const auction = await prisma.auction.upsert({
     *   create: {
     *     // ... data to create a Auction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auction we want to update
     *   }
     * })
     */
    upsert<T extends AuctionUpsertArgs>(args: SelectSubset<T, AuctionUpsertArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionCountArgs} args - Arguments to filter Auctions to count.
     * @example
     * // Count the number of Auctions
     * const count = await prisma.auction.count({
     *   where: {
     *     // ... the filter for the Auctions we want to count
     *   }
     * })
    **/
    count<T extends AuctionCountArgs>(
      args?: Subset<T, AuctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionAggregateArgs>(args: Subset<T, AuctionAggregateArgs>): Prisma.PrismaPromise<GetAuctionAggregateType<T>>

    /**
     * Group by Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionGroupByArgs['orderBy'] }
        : { orderBy?: AuctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auction model
   */
  readonly fields: AuctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chitScheme<T extends ChitSchemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChitSchemeDefaultArgs<ExtArgs>>): Prisma__ChitSchemeClient<$Result.GetResult<Prisma.$ChitSchemePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    winningMember<T extends Auction$winningMemberArgs<ExtArgs> = {}>(args?: Subset<T, Auction$winningMemberArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auction model
   */ 
  interface AuctionFieldRefs {
    readonly id: FieldRef<"Auction", 'String'>
    readonly chitSchemeId: FieldRef<"Auction", 'String'>
    readonly auctionDate: FieldRef<"Auction", 'DateTime'>
    readonly winningMemberId: FieldRef<"Auction", 'String'>
    readonly amountReceived: FieldRef<"Auction", 'Int'>
    readonly discountAmount: FieldRef<"Auction", 'Int'>
    readonly newDailyPayment: FieldRef<"Auction", 'Int'>
    readonly previousDailyPayment: FieldRef<"Auction", 'Int'>
    readonly status: FieldRef<"Auction", 'AuctionStatus'>
    readonly remarks: FieldRef<"Auction", 'String'>
    readonly createdById: FieldRef<"Auction", 'String'>
    readonly createdAt: FieldRef<"Auction", 'DateTime'>
    readonly updatedAt: FieldRef<"Auction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Auction findUnique
   */
  export type AuctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findUniqueOrThrow
   */
  export type AuctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findFirst
   */
  export type AuctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findFirstOrThrow
   */
  export type AuctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findMany
   */
  export type AuctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auctions to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction create
   */
  export type AuctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to create a Auction.
     */
    data: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
  }

  /**
   * Auction createMany
   */
  export type AuctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auction createManyAndReturn
   */
  export type AuctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auction update
   */
  export type AuctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to update a Auction.
     */
    data: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
    /**
     * Choose, which Auction to update.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction updateMany
   */
  export type AuctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auctions.
     */
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyInput>
    /**
     * Filter which Auctions to update
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction upsert
   */
  export type AuctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The filter to search for the Auction to update in case it exists.
     */
    where: AuctionWhereUniqueInput
    /**
     * In case the Auction found by the `where` argument doesn't exist, create a new Auction with this data.
     */
    create: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
    /**
     * In case the Auction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
  }

  /**
   * Auction delete
   */
  export type AuctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter which Auction to delete.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction deleteMany
   */
  export type AuctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auctions to delete
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction.winningMember
   */
  export type Auction$winningMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Auction without action
   */
  export type AuctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
  }


  /**
   * Model PassbookEntry
   */

  export type AggregatePassbookEntry = {
    _count: PassbookEntryCountAggregateOutputType | null
    _avg: PassbookEntryAvgAggregateOutputType | null
    _sum: PassbookEntrySumAggregateOutputType | null
    _min: PassbookEntryMinAggregateOutputType | null
    _max: PassbookEntryMaxAggregateOutputType | null
  }

  export type PassbookEntryAvgAggregateOutputType = {
    month: number | null
    dailyPayment: number | null
    amount: number | null
    chittiAmount: number | null
    chitLiftingAmount: number | null
  }

  export type PassbookEntrySumAggregateOutputType = {
    month: number | null
    dailyPayment: number | null
    amount: number | null
    chittiAmount: number | null
    chitLiftingAmount: number | null
  }

  export type PassbookEntryMinAggregateOutputType = {
    id: string | null
    customerSchemeId: string | null
    month: number | null
    date: Date | null
    dailyPayment: number | null
    amount: number | null
    chittiAmount: number | null
    chitLiftingAmount: number | null
    type: $Enums.EntryType | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentFrequency: $Enums.PaymentFrequency | null
    chitLifting: $Enums.ChitLiftingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassbookEntryMaxAggregateOutputType = {
    id: string | null
    customerSchemeId: string | null
    month: number | null
    date: Date | null
    dailyPayment: number | null
    amount: number | null
    chittiAmount: number | null
    chitLiftingAmount: number | null
    type: $Enums.EntryType | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentFrequency: $Enums.PaymentFrequency | null
    chitLifting: $Enums.ChitLiftingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PassbookEntryCountAggregateOutputType = {
    id: number
    customerSchemeId: number
    month: number
    date: number
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount: number
    type: number
    paymentMethod: number
    paymentFrequency: number
    chitLifting: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PassbookEntryAvgAggregateInputType = {
    month?: true
    dailyPayment?: true
    amount?: true
    chittiAmount?: true
    chitLiftingAmount?: true
  }

  export type PassbookEntrySumAggregateInputType = {
    month?: true
    dailyPayment?: true
    amount?: true
    chittiAmount?: true
    chitLiftingAmount?: true
  }

  export type PassbookEntryMinAggregateInputType = {
    id?: true
    customerSchemeId?: true
    month?: true
    date?: true
    dailyPayment?: true
    amount?: true
    chittiAmount?: true
    chitLiftingAmount?: true
    type?: true
    paymentMethod?: true
    paymentFrequency?: true
    chitLifting?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassbookEntryMaxAggregateInputType = {
    id?: true
    customerSchemeId?: true
    month?: true
    date?: true
    dailyPayment?: true
    amount?: true
    chittiAmount?: true
    chitLiftingAmount?: true
    type?: true
    paymentMethod?: true
    paymentFrequency?: true
    chitLifting?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PassbookEntryCountAggregateInputType = {
    id?: true
    customerSchemeId?: true
    month?: true
    date?: true
    dailyPayment?: true
    amount?: true
    chittiAmount?: true
    chitLiftingAmount?: true
    type?: true
    paymentMethod?: true
    paymentFrequency?: true
    chitLifting?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PassbookEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassbookEntry to aggregate.
     */
    where?: PassbookEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassbookEntries to fetch.
     */
    orderBy?: PassbookEntryOrderByWithRelationInput | PassbookEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PassbookEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassbookEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassbookEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PassbookEntries
    **/
    _count?: true | PassbookEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PassbookEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PassbookEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassbookEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassbookEntryMaxAggregateInputType
  }

  export type GetPassbookEntryAggregateType<T extends PassbookEntryAggregateArgs> = {
        [P in keyof T & keyof AggregatePassbookEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassbookEntry[P]>
      : GetScalarType<T[P], AggregatePassbookEntry[P]>
  }




  export type PassbookEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PassbookEntryWhereInput
    orderBy?: PassbookEntryOrderByWithAggregationInput | PassbookEntryOrderByWithAggregationInput[]
    by: PassbookEntryScalarFieldEnum[] | PassbookEntryScalarFieldEnum
    having?: PassbookEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassbookEntryCountAggregateInputType | true
    _avg?: PassbookEntryAvgAggregateInputType
    _sum?: PassbookEntrySumAggregateInputType
    _min?: PassbookEntryMinAggregateInputType
    _max?: PassbookEntryMaxAggregateInputType
  }

  export type PassbookEntryGroupByOutputType = {
    id: string
    customerSchemeId: string
    month: number
    date: Date
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount: number | null
    type: $Enums.EntryType
    paymentMethod: $Enums.PaymentMethod
    paymentFrequency: $Enums.PaymentFrequency
    chitLifting: $Enums.ChitLiftingStatus
    createdAt: Date
    updatedAt: Date
    _count: PassbookEntryCountAggregateOutputType | null
    _avg: PassbookEntryAvgAggregateOutputType | null
    _sum: PassbookEntrySumAggregateOutputType | null
    _min: PassbookEntryMinAggregateOutputType | null
    _max: PassbookEntryMaxAggregateOutputType | null
  }

  type GetPassbookEntryGroupByPayload<T extends PassbookEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassbookEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassbookEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassbookEntryGroupByOutputType[P]>
            : GetScalarType<T[P], PassbookEntryGroupByOutputType[P]>
        }
      >
    >


  export type PassbookEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerSchemeId?: boolean
    month?: boolean
    date?: boolean
    dailyPayment?: boolean
    amount?: boolean
    chittiAmount?: boolean
    chitLiftingAmount?: boolean
    type?: boolean
    paymentMethod?: boolean
    paymentFrequency?: boolean
    chitLifting?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerScheme?: boolean | CustomerSchemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passbookEntry"]>

  export type PassbookEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerSchemeId?: boolean
    month?: boolean
    date?: boolean
    dailyPayment?: boolean
    amount?: boolean
    chittiAmount?: boolean
    chitLiftingAmount?: boolean
    type?: boolean
    paymentMethod?: boolean
    paymentFrequency?: boolean
    chitLifting?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customerScheme?: boolean | CustomerSchemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passbookEntry"]>

  export type PassbookEntrySelectScalar = {
    id?: boolean
    customerSchemeId?: boolean
    month?: boolean
    date?: boolean
    dailyPayment?: boolean
    amount?: boolean
    chittiAmount?: boolean
    chitLiftingAmount?: boolean
    type?: boolean
    paymentMethod?: boolean
    paymentFrequency?: boolean
    chitLifting?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PassbookEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerScheme?: boolean | CustomerSchemeDefaultArgs<ExtArgs>
  }
  export type PassbookEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customerScheme?: boolean | CustomerSchemeDefaultArgs<ExtArgs>
  }

  export type $PassbookEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PassbookEntry"
    objects: {
      customerScheme: Prisma.$CustomerSchemePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerSchemeId: string
      month: number
      date: Date
      dailyPayment: number
      amount: number
      chittiAmount: number
      chitLiftingAmount: number | null
      type: $Enums.EntryType
      paymentMethod: $Enums.PaymentMethod
      paymentFrequency: $Enums.PaymentFrequency
      chitLifting: $Enums.ChitLiftingStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["passbookEntry"]>
    composites: {}
  }

  type PassbookEntryGetPayload<S extends boolean | null | undefined | PassbookEntryDefaultArgs> = $Result.GetResult<Prisma.$PassbookEntryPayload, S>

  type PassbookEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PassbookEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PassbookEntryCountAggregateInputType | true
    }

  export interface PassbookEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PassbookEntry'], meta: { name: 'PassbookEntry' } }
    /**
     * Find zero or one PassbookEntry that matches the filter.
     * @param {PassbookEntryFindUniqueArgs} args - Arguments to find a PassbookEntry
     * @example
     * // Get one PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PassbookEntryFindUniqueArgs>(args: SelectSubset<T, PassbookEntryFindUniqueArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PassbookEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PassbookEntryFindUniqueOrThrowArgs} args - Arguments to find a PassbookEntry
     * @example
     * // Get one PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PassbookEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, PassbookEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PassbookEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryFindFirstArgs} args - Arguments to find a PassbookEntry
     * @example
     * // Get one PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PassbookEntryFindFirstArgs>(args?: SelectSubset<T, PassbookEntryFindFirstArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PassbookEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryFindFirstOrThrowArgs} args - Arguments to find a PassbookEntry
     * @example
     * // Get one PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PassbookEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, PassbookEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PassbookEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PassbookEntries
     * const passbookEntries = await prisma.passbookEntry.findMany()
     * 
     * // Get first 10 PassbookEntries
     * const passbookEntries = await prisma.passbookEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passbookEntryWithIdOnly = await prisma.passbookEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PassbookEntryFindManyArgs>(args?: SelectSubset<T, PassbookEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PassbookEntry.
     * @param {PassbookEntryCreateArgs} args - Arguments to create a PassbookEntry.
     * @example
     * // Create one PassbookEntry
     * const PassbookEntry = await prisma.passbookEntry.create({
     *   data: {
     *     // ... data to create a PassbookEntry
     *   }
     * })
     * 
     */
    create<T extends PassbookEntryCreateArgs>(args: SelectSubset<T, PassbookEntryCreateArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PassbookEntries.
     * @param {PassbookEntryCreateManyArgs} args - Arguments to create many PassbookEntries.
     * @example
     * // Create many PassbookEntries
     * const passbookEntry = await prisma.passbookEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PassbookEntryCreateManyArgs>(args?: SelectSubset<T, PassbookEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PassbookEntries and returns the data saved in the database.
     * @param {PassbookEntryCreateManyAndReturnArgs} args - Arguments to create many PassbookEntries.
     * @example
     * // Create many PassbookEntries
     * const passbookEntry = await prisma.passbookEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PassbookEntries and only return the `id`
     * const passbookEntryWithIdOnly = await prisma.passbookEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PassbookEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, PassbookEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PassbookEntry.
     * @param {PassbookEntryDeleteArgs} args - Arguments to delete one PassbookEntry.
     * @example
     * // Delete one PassbookEntry
     * const PassbookEntry = await prisma.passbookEntry.delete({
     *   where: {
     *     // ... filter to delete one PassbookEntry
     *   }
     * })
     * 
     */
    delete<T extends PassbookEntryDeleteArgs>(args: SelectSubset<T, PassbookEntryDeleteArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PassbookEntry.
     * @param {PassbookEntryUpdateArgs} args - Arguments to update one PassbookEntry.
     * @example
     * // Update one PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PassbookEntryUpdateArgs>(args: SelectSubset<T, PassbookEntryUpdateArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PassbookEntries.
     * @param {PassbookEntryDeleteManyArgs} args - Arguments to filter PassbookEntries to delete.
     * @example
     * // Delete a few PassbookEntries
     * const { count } = await prisma.passbookEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PassbookEntryDeleteManyArgs>(args?: SelectSubset<T, PassbookEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PassbookEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PassbookEntries
     * const passbookEntry = await prisma.passbookEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PassbookEntryUpdateManyArgs>(args: SelectSubset<T, PassbookEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PassbookEntry.
     * @param {PassbookEntryUpsertArgs} args - Arguments to update or create a PassbookEntry.
     * @example
     * // Update or create a PassbookEntry
     * const passbookEntry = await prisma.passbookEntry.upsert({
     *   create: {
     *     // ... data to create a PassbookEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PassbookEntry we want to update
     *   }
     * })
     */
    upsert<T extends PassbookEntryUpsertArgs>(args: SelectSubset<T, PassbookEntryUpsertArgs<ExtArgs>>): Prisma__PassbookEntryClient<$Result.GetResult<Prisma.$PassbookEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PassbookEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryCountArgs} args - Arguments to filter PassbookEntries to count.
     * @example
     * // Count the number of PassbookEntries
     * const count = await prisma.passbookEntry.count({
     *   where: {
     *     // ... the filter for the PassbookEntries we want to count
     *   }
     * })
    **/
    count<T extends PassbookEntryCountArgs>(
      args?: Subset<T, PassbookEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassbookEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PassbookEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassbookEntryAggregateArgs>(args: Subset<T, PassbookEntryAggregateArgs>): Prisma.PrismaPromise<GetPassbookEntryAggregateType<T>>

    /**
     * Group by PassbookEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassbookEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PassbookEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PassbookEntryGroupByArgs['orderBy'] }
        : { orderBy?: PassbookEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PassbookEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassbookEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PassbookEntry model
   */
  readonly fields: PassbookEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PassbookEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PassbookEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customerScheme<T extends CustomerSchemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerSchemeDefaultArgs<ExtArgs>>): Prisma__CustomerSchemeClient<$Result.GetResult<Prisma.$CustomerSchemePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PassbookEntry model
   */ 
  interface PassbookEntryFieldRefs {
    readonly id: FieldRef<"PassbookEntry", 'String'>
    readonly customerSchemeId: FieldRef<"PassbookEntry", 'String'>
    readonly month: FieldRef<"PassbookEntry", 'Int'>
    readonly date: FieldRef<"PassbookEntry", 'DateTime'>
    readonly dailyPayment: FieldRef<"PassbookEntry", 'Int'>
    readonly amount: FieldRef<"PassbookEntry", 'Int'>
    readonly chittiAmount: FieldRef<"PassbookEntry", 'Int'>
    readonly chitLiftingAmount: FieldRef<"PassbookEntry", 'Int'>
    readonly type: FieldRef<"PassbookEntry", 'EntryType'>
    readonly paymentMethod: FieldRef<"PassbookEntry", 'PaymentMethod'>
    readonly paymentFrequency: FieldRef<"PassbookEntry", 'PaymentFrequency'>
    readonly chitLifting: FieldRef<"PassbookEntry", 'ChitLiftingStatus'>
    readonly createdAt: FieldRef<"PassbookEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"PassbookEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PassbookEntry findUnique
   */
  export type PassbookEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter, which PassbookEntry to fetch.
     */
    where: PassbookEntryWhereUniqueInput
  }

  /**
   * PassbookEntry findUniqueOrThrow
   */
  export type PassbookEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter, which PassbookEntry to fetch.
     */
    where: PassbookEntryWhereUniqueInput
  }

  /**
   * PassbookEntry findFirst
   */
  export type PassbookEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter, which PassbookEntry to fetch.
     */
    where?: PassbookEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassbookEntries to fetch.
     */
    orderBy?: PassbookEntryOrderByWithRelationInput | PassbookEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassbookEntries.
     */
    cursor?: PassbookEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassbookEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassbookEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassbookEntries.
     */
    distinct?: PassbookEntryScalarFieldEnum | PassbookEntryScalarFieldEnum[]
  }

  /**
   * PassbookEntry findFirstOrThrow
   */
  export type PassbookEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter, which PassbookEntry to fetch.
     */
    where?: PassbookEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassbookEntries to fetch.
     */
    orderBy?: PassbookEntryOrderByWithRelationInput | PassbookEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PassbookEntries.
     */
    cursor?: PassbookEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassbookEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassbookEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PassbookEntries.
     */
    distinct?: PassbookEntryScalarFieldEnum | PassbookEntryScalarFieldEnum[]
  }

  /**
   * PassbookEntry findMany
   */
  export type PassbookEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter, which PassbookEntries to fetch.
     */
    where?: PassbookEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PassbookEntries to fetch.
     */
    orderBy?: PassbookEntryOrderByWithRelationInput | PassbookEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PassbookEntries.
     */
    cursor?: PassbookEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PassbookEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PassbookEntries.
     */
    skip?: number
    distinct?: PassbookEntryScalarFieldEnum | PassbookEntryScalarFieldEnum[]
  }

  /**
   * PassbookEntry create
   */
  export type PassbookEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a PassbookEntry.
     */
    data: XOR<PassbookEntryCreateInput, PassbookEntryUncheckedCreateInput>
  }

  /**
   * PassbookEntry createMany
   */
  export type PassbookEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PassbookEntries.
     */
    data: PassbookEntryCreateManyInput | PassbookEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PassbookEntry createManyAndReturn
   */
  export type PassbookEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PassbookEntries.
     */
    data: PassbookEntryCreateManyInput | PassbookEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PassbookEntry update
   */
  export type PassbookEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a PassbookEntry.
     */
    data: XOR<PassbookEntryUpdateInput, PassbookEntryUncheckedUpdateInput>
    /**
     * Choose, which PassbookEntry to update.
     */
    where: PassbookEntryWhereUniqueInput
  }

  /**
   * PassbookEntry updateMany
   */
  export type PassbookEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PassbookEntries.
     */
    data: XOR<PassbookEntryUpdateManyMutationInput, PassbookEntryUncheckedUpdateManyInput>
    /**
     * Filter which PassbookEntries to update
     */
    where?: PassbookEntryWhereInput
  }

  /**
   * PassbookEntry upsert
   */
  export type PassbookEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the PassbookEntry to update in case it exists.
     */
    where: PassbookEntryWhereUniqueInput
    /**
     * In case the PassbookEntry found by the `where` argument doesn't exist, create a new PassbookEntry with this data.
     */
    create: XOR<PassbookEntryCreateInput, PassbookEntryUncheckedCreateInput>
    /**
     * In case the PassbookEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PassbookEntryUpdateInput, PassbookEntryUncheckedUpdateInput>
  }

  /**
   * PassbookEntry delete
   */
  export type PassbookEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
    /**
     * Filter which PassbookEntry to delete.
     */
    where: PassbookEntryWhereUniqueInput
  }

  /**
   * PassbookEntry deleteMany
   */
  export type PassbookEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PassbookEntries to delete
     */
    where?: PassbookEntryWhereInput
  }

  /**
   * PassbookEntry without action
   */
  export type PassbookEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PassbookEntry
     */
    select?: PassbookEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PassbookEntryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChitSchemeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    chitValue: 'chitValue',
    duration: 'duration',
    durationType: 'durationType',
    paymentType: 'paymentType',
    dailyPayment: 'dailyPayment',
    monthlyPayment: 'monthlyPayment',
    numberOfMembers: 'numberOfMembers',
    auctionRules: 'auctionRules',
    status: 'status',
    membersEnrolled: 'membersEnrolled',
    startDate: 'startDate',
    endDate: 'endDate',
    lastDate: 'lastDate',
    description: 'description',
    commissionRate: 'commissionRate',
    penaltyRate: 'penaltyRate',
    minBidAmount: 'minBidAmount',
    maxBidAmount: 'maxBidAmount',
    isActive: 'isActive',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChitSchemeScalarFieldEnum = (typeof ChitSchemeScalarFieldEnum)[keyof typeof ChitSchemeScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mobile: 'mobile',
    address: 'address',
    startDate: 'startDate',
    lastDate: 'lastDate',
    amountPerDay: 'amountPerDay',
    duration: 'duration',
    durationType: 'durationType',
    status: 'status',
    balance: 'balance',
    photo: 'photo',
    documents: 'documents',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CustomerSchemeScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    schemeId: 'schemeId',
    enrolledAt: 'enrolledAt',
    status: 'status',
    amountPerDay: 'amountPerDay',
    duration: 'duration',
    durationType: 'durationType',
    startDate: 'startDate',
    lastDate: 'lastDate',
    balance: 'balance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerSchemeScalarFieldEnum = (typeof CustomerSchemeScalarFieldEnum)[keyof typeof CustomerSchemeScalarFieldEnum]


  export const CollectionScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    amountPaid: 'amountPaid',
    collectorId: 'collectorId',
    date: 'date',
    balanceRemaining: 'balanceRemaining',
    paymentMethod: 'paymentMethod',
    remarks: 'remarks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CollectionScalarFieldEnum = (typeof CollectionScalarFieldEnum)[keyof typeof CollectionScalarFieldEnum]


  export const AuctionScalarFieldEnum: {
    id: 'id',
    chitSchemeId: 'chitSchemeId',
    auctionDate: 'auctionDate',
    winningMemberId: 'winningMemberId',
    amountReceived: 'amountReceived',
    discountAmount: 'discountAmount',
    newDailyPayment: 'newDailyPayment',
    previousDailyPayment: 'previousDailyPayment',
    status: 'status',
    remarks: 'remarks',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuctionScalarFieldEnum = (typeof AuctionScalarFieldEnum)[keyof typeof AuctionScalarFieldEnum]


  export const PassbookEntryScalarFieldEnum: {
    id: 'id',
    customerSchemeId: 'customerSchemeId',
    month: 'month',
    date: 'date',
    dailyPayment: 'dailyPayment',
    amount: 'amount',
    chittiAmount: 'chittiAmount',
    chitLiftingAmount: 'chitLiftingAmount',
    type: 'type',
    paymentMethod: 'paymentMethod',
    paymentFrequency: 'paymentFrequency',
    chitLifting: 'chitLifting',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PassbookEntryScalarFieldEnum = (typeof PassbookEntryScalarFieldEnum)[keyof typeof PassbookEntryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DurationType'
   */
  export type EnumDurationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DurationType'>
    


  /**
   * Reference to a field of type 'DurationType[]'
   */
  export type ListEnumDurationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DurationType[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'SchemeStatus'
   */
  export type EnumSchemeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SchemeStatus'>
    


  /**
   * Reference to a field of type 'SchemeStatus[]'
   */
  export type ListEnumSchemeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SchemeStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CustomerStatus'
   */
  export type EnumCustomerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerStatus'>
    


  /**
   * Reference to a field of type 'CustomerStatus[]'
   */
  export type ListEnumCustomerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'AuctionStatus'
   */
  export type EnumAuctionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionStatus'>
    


  /**
   * Reference to a field of type 'AuctionStatus[]'
   */
  export type ListEnumAuctionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuctionStatus[]'>
    


  /**
   * Reference to a field of type 'EntryType'
   */
  export type EnumEntryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntryType'>
    


  /**
   * Reference to a field of type 'EntryType[]'
   */
  export type ListEnumEntryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EntryType[]'>
    


  /**
   * Reference to a field of type 'PaymentFrequency'
   */
  export type EnumPaymentFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentFrequency'>
    


  /**
   * Reference to a field of type 'PaymentFrequency[]'
   */
  export type ListEnumPaymentFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentFrequency[]'>
    


  /**
   * Reference to a field of type 'ChitLiftingStatus'
   */
  export type EnumChitLiftingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChitLiftingStatus'>
    


  /**
   * Reference to a field of type 'ChitLiftingStatus[]'
   */
  export type ListEnumChitLiftingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChitLiftingStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    collections?: CollectionListRelationFilter
    auctions?: AuctionListRelationFilter
    createdSchemes?: ChitSchemeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    collections?: CollectionOrderByRelationAggregateInput
    auctions?: AuctionOrderByRelationAggregateInput
    createdSchemes?: ChitSchemeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    collections?: CollectionListRelationFilter
    auctions?: AuctionListRelationFilter
    createdSchemes?: ChitSchemeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ChitSchemeWhereInput = {
    AND?: ChitSchemeWhereInput | ChitSchemeWhereInput[]
    OR?: ChitSchemeWhereInput[]
    NOT?: ChitSchemeWhereInput | ChitSchemeWhereInput[]
    id?: StringFilter<"ChitScheme"> | string
    name?: StringFilter<"ChitScheme"> | string
    chitValue?: IntFilter<"ChitScheme"> | number
    duration?: IntFilter<"ChitScheme"> | number
    durationType?: EnumDurationTypeFilter<"ChitScheme"> | $Enums.DurationType
    paymentType?: EnumPaymentTypeFilter<"ChitScheme"> | $Enums.PaymentType
    dailyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    monthlyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    numberOfMembers?: IntFilter<"ChitScheme"> | number
    auctionRules?: StringNullableFilter<"ChitScheme"> | string | null
    status?: EnumSchemeStatusFilter<"ChitScheme"> | $Enums.SchemeStatus
    membersEnrolled?: IntFilter<"ChitScheme"> | number
    startDate?: DateTimeFilter<"ChitScheme"> | Date | string
    endDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    lastDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    description?: StringNullableFilter<"ChitScheme"> | string | null
    commissionRate?: FloatNullableFilter<"ChitScheme"> | number | null
    penaltyRate?: FloatNullableFilter<"ChitScheme"> | number | null
    minBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    maxBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    isActive?: BoolFilter<"ChitScheme"> | boolean
    createdBy?: StringNullableFilter<"ChitScheme"> | string | null
    createdAt?: DateTimeFilter<"ChitScheme"> | Date | string
    updatedAt?: DateTimeFilter<"ChitScheme"> | Date | string
    customerSchemes?: CustomerSchemeListRelationFilter
    auctions?: AuctionListRelationFilter
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ChitSchemeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    chitValue?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    paymentType?: SortOrder
    dailyPayment?: SortOrderInput | SortOrder
    monthlyPayment?: SortOrderInput | SortOrder
    numberOfMembers?: SortOrder
    auctionRules?: SortOrderInput | SortOrder
    status?: SortOrder
    membersEnrolled?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    lastDate?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    commissionRate?: SortOrderInput | SortOrder
    penaltyRate?: SortOrderInput | SortOrder
    minBidAmount?: SortOrderInput | SortOrder
    maxBidAmount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerSchemes?: CustomerSchemeOrderByRelationAggregateInput
    auctions?: AuctionOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
  }

  export type ChitSchemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChitSchemeWhereInput | ChitSchemeWhereInput[]
    OR?: ChitSchemeWhereInput[]
    NOT?: ChitSchemeWhereInput | ChitSchemeWhereInput[]
    name?: StringFilter<"ChitScheme"> | string
    chitValue?: IntFilter<"ChitScheme"> | number
    duration?: IntFilter<"ChitScheme"> | number
    durationType?: EnumDurationTypeFilter<"ChitScheme"> | $Enums.DurationType
    paymentType?: EnumPaymentTypeFilter<"ChitScheme"> | $Enums.PaymentType
    dailyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    monthlyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    numberOfMembers?: IntFilter<"ChitScheme"> | number
    auctionRules?: StringNullableFilter<"ChitScheme"> | string | null
    status?: EnumSchemeStatusFilter<"ChitScheme"> | $Enums.SchemeStatus
    membersEnrolled?: IntFilter<"ChitScheme"> | number
    startDate?: DateTimeFilter<"ChitScheme"> | Date | string
    endDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    lastDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    description?: StringNullableFilter<"ChitScheme"> | string | null
    commissionRate?: FloatNullableFilter<"ChitScheme"> | number | null
    penaltyRate?: FloatNullableFilter<"ChitScheme"> | number | null
    minBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    maxBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    isActive?: BoolFilter<"ChitScheme"> | boolean
    createdBy?: StringNullableFilter<"ChitScheme"> | string | null
    createdAt?: DateTimeFilter<"ChitScheme"> | Date | string
    updatedAt?: DateTimeFilter<"ChitScheme"> | Date | string
    customerSchemes?: CustomerSchemeListRelationFilter
    auctions?: AuctionListRelationFilter
    creator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChitSchemeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    chitValue?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    paymentType?: SortOrder
    dailyPayment?: SortOrderInput | SortOrder
    monthlyPayment?: SortOrderInput | SortOrder
    numberOfMembers?: SortOrder
    auctionRules?: SortOrderInput | SortOrder
    status?: SortOrder
    membersEnrolled?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    lastDate?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    commissionRate?: SortOrderInput | SortOrder
    penaltyRate?: SortOrderInput | SortOrder
    minBidAmount?: SortOrderInput | SortOrder
    maxBidAmount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChitSchemeCountOrderByAggregateInput
    _avg?: ChitSchemeAvgOrderByAggregateInput
    _max?: ChitSchemeMaxOrderByAggregateInput
    _min?: ChitSchemeMinOrderByAggregateInput
    _sum?: ChitSchemeSumOrderByAggregateInput
  }

  export type ChitSchemeScalarWhereWithAggregatesInput = {
    AND?: ChitSchemeScalarWhereWithAggregatesInput | ChitSchemeScalarWhereWithAggregatesInput[]
    OR?: ChitSchemeScalarWhereWithAggregatesInput[]
    NOT?: ChitSchemeScalarWhereWithAggregatesInput | ChitSchemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChitScheme"> | string
    name?: StringWithAggregatesFilter<"ChitScheme"> | string
    chitValue?: IntWithAggregatesFilter<"ChitScheme"> | number
    duration?: IntWithAggregatesFilter<"ChitScheme"> | number
    durationType?: EnumDurationTypeWithAggregatesFilter<"ChitScheme"> | $Enums.DurationType
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"ChitScheme"> | $Enums.PaymentType
    dailyPayment?: IntNullableWithAggregatesFilter<"ChitScheme"> | number | null
    monthlyPayment?: IntNullableWithAggregatesFilter<"ChitScheme"> | number | null
    numberOfMembers?: IntWithAggregatesFilter<"ChitScheme"> | number
    auctionRules?: StringNullableWithAggregatesFilter<"ChitScheme"> | string | null
    status?: EnumSchemeStatusWithAggregatesFilter<"ChitScheme"> | $Enums.SchemeStatus
    membersEnrolled?: IntWithAggregatesFilter<"ChitScheme"> | number
    startDate?: DateTimeWithAggregatesFilter<"ChitScheme"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ChitScheme"> | Date | string | null
    lastDate?: DateTimeNullableWithAggregatesFilter<"ChitScheme"> | Date | string | null
    description?: StringNullableWithAggregatesFilter<"ChitScheme"> | string | null
    commissionRate?: FloatNullableWithAggregatesFilter<"ChitScheme"> | number | null
    penaltyRate?: FloatNullableWithAggregatesFilter<"ChitScheme"> | number | null
    minBidAmount?: IntNullableWithAggregatesFilter<"ChitScheme"> | number | null
    maxBidAmount?: IntNullableWithAggregatesFilter<"ChitScheme"> | number | null
    isActive?: BoolWithAggregatesFilter<"ChitScheme"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"ChitScheme"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChitScheme"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChitScheme"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    mobile?: StringFilter<"Customer"> | string
    address?: StringFilter<"Customer"> | string
    startDate?: DateTimeFilter<"Customer"> | Date | string
    lastDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    amountPerDay?: IntFilter<"Customer"> | number
    duration?: IntFilter<"Customer"> | number
    durationType?: EnumDurationTypeFilter<"Customer"> | $Enums.DurationType
    status?: EnumCustomerStatusFilter<"Customer"> | $Enums.CustomerStatus
    balance?: IntFilter<"Customer"> | number
    photo?: StringNullableFilter<"Customer"> | string | null
    documents?: StringNullableListFilter<"Customer">
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    schemes?: CustomerSchemeListRelationFilter
    collections?: CollectionListRelationFilter
    wonAuctions?: AuctionListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mobile?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrderInput | SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    balance?: SortOrder
    photo?: SortOrderInput | SortOrder
    documents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    schemes?: CustomerSchemeOrderByRelationAggregateInput
    collections?: CollectionOrderByRelationAggregateInput
    wonAuctions?: AuctionOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    mobile?: StringFilter<"Customer"> | string
    address?: StringFilter<"Customer"> | string
    startDate?: DateTimeFilter<"Customer"> | Date | string
    lastDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    amountPerDay?: IntFilter<"Customer"> | number
    duration?: IntFilter<"Customer"> | number
    durationType?: EnumDurationTypeFilter<"Customer"> | $Enums.DurationType
    status?: EnumCustomerStatusFilter<"Customer"> | $Enums.CustomerStatus
    balance?: IntFilter<"Customer"> | number
    photo?: StringNullableFilter<"Customer"> | string | null
    documents?: StringNullableListFilter<"Customer">
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    schemes?: CustomerSchemeListRelationFilter
    collections?: CollectionListRelationFilter
    wonAuctions?: AuctionListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mobile?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrderInput | SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    balance?: SortOrder
    photo?: SortOrderInput | SortOrder
    documents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    mobile?: StringWithAggregatesFilter<"Customer"> | string
    address?: StringWithAggregatesFilter<"Customer"> | string
    startDate?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    lastDate?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    amountPerDay?: IntWithAggregatesFilter<"Customer"> | number
    duration?: IntWithAggregatesFilter<"Customer"> | number
    durationType?: EnumDurationTypeWithAggregatesFilter<"Customer"> | $Enums.DurationType
    status?: EnumCustomerStatusWithAggregatesFilter<"Customer"> | $Enums.CustomerStatus
    balance?: IntWithAggregatesFilter<"Customer"> | number
    photo?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    documents?: StringNullableListFilter<"Customer">
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type CustomerSchemeWhereInput = {
    AND?: CustomerSchemeWhereInput | CustomerSchemeWhereInput[]
    OR?: CustomerSchemeWhereInput[]
    NOT?: CustomerSchemeWhereInput | CustomerSchemeWhereInput[]
    id?: StringFilter<"CustomerScheme"> | string
    customerId?: StringFilter<"CustomerScheme"> | string
    schemeId?: StringFilter<"CustomerScheme"> | string
    enrolledAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    status?: EnumCustomerStatusFilter<"CustomerScheme"> | $Enums.CustomerStatus
    amountPerDay?: IntFilter<"CustomerScheme"> | number
    duration?: IntFilter<"CustomerScheme"> | number
    durationType?: EnumDurationTypeFilter<"CustomerScheme"> | $Enums.DurationType
    startDate?: DateTimeFilter<"CustomerScheme"> | Date | string
    lastDate?: DateTimeNullableFilter<"CustomerScheme"> | Date | string | null
    balance?: IntFilter<"CustomerScheme"> | number
    createdAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    scheme?: XOR<ChitSchemeRelationFilter, ChitSchemeWhereInput>
    passbookEntries?: PassbookEntryListRelationFilter
  }

  export type CustomerSchemeOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    schemeId?: SortOrder
    enrolledAt?: SortOrder
    status?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrderInput | SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    scheme?: ChitSchemeOrderByWithRelationInput
    passbookEntries?: PassbookEntryOrderByRelationAggregateInput
  }

  export type CustomerSchemeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customerId_schemeId?: CustomerSchemeCustomerIdSchemeIdCompoundUniqueInput
    AND?: CustomerSchemeWhereInput | CustomerSchemeWhereInput[]
    OR?: CustomerSchemeWhereInput[]
    NOT?: CustomerSchemeWhereInput | CustomerSchemeWhereInput[]
    customerId?: StringFilter<"CustomerScheme"> | string
    schemeId?: StringFilter<"CustomerScheme"> | string
    enrolledAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    status?: EnumCustomerStatusFilter<"CustomerScheme"> | $Enums.CustomerStatus
    amountPerDay?: IntFilter<"CustomerScheme"> | number
    duration?: IntFilter<"CustomerScheme"> | number
    durationType?: EnumDurationTypeFilter<"CustomerScheme"> | $Enums.DurationType
    startDate?: DateTimeFilter<"CustomerScheme"> | Date | string
    lastDate?: DateTimeNullableFilter<"CustomerScheme"> | Date | string | null
    balance?: IntFilter<"CustomerScheme"> | number
    createdAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    scheme?: XOR<ChitSchemeRelationFilter, ChitSchemeWhereInput>
    passbookEntries?: PassbookEntryListRelationFilter
  }, "id" | "customerId_schemeId">

  export type CustomerSchemeOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    schemeId?: SortOrder
    enrolledAt?: SortOrder
    status?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrderInput | SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerSchemeCountOrderByAggregateInput
    _avg?: CustomerSchemeAvgOrderByAggregateInput
    _max?: CustomerSchemeMaxOrderByAggregateInput
    _min?: CustomerSchemeMinOrderByAggregateInput
    _sum?: CustomerSchemeSumOrderByAggregateInput
  }

  export type CustomerSchemeScalarWhereWithAggregatesInput = {
    AND?: CustomerSchemeScalarWhereWithAggregatesInput | CustomerSchemeScalarWhereWithAggregatesInput[]
    OR?: CustomerSchemeScalarWhereWithAggregatesInput[]
    NOT?: CustomerSchemeScalarWhereWithAggregatesInput | CustomerSchemeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerScheme"> | string
    customerId?: StringWithAggregatesFilter<"CustomerScheme"> | string
    schemeId?: StringWithAggregatesFilter<"CustomerScheme"> | string
    enrolledAt?: DateTimeWithAggregatesFilter<"CustomerScheme"> | Date | string
    status?: EnumCustomerStatusWithAggregatesFilter<"CustomerScheme"> | $Enums.CustomerStatus
    amountPerDay?: IntWithAggregatesFilter<"CustomerScheme"> | number
    duration?: IntWithAggregatesFilter<"CustomerScheme"> | number
    durationType?: EnumDurationTypeWithAggregatesFilter<"CustomerScheme"> | $Enums.DurationType
    startDate?: DateTimeWithAggregatesFilter<"CustomerScheme"> | Date | string
    lastDate?: DateTimeNullableWithAggregatesFilter<"CustomerScheme"> | Date | string | null
    balance?: IntWithAggregatesFilter<"CustomerScheme"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CustomerScheme"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerScheme"> | Date | string
  }

  export type CollectionWhereInput = {
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    id?: StringFilter<"Collection"> | string
    customerId?: StringFilter<"Collection"> | string
    amountPaid?: IntFilter<"Collection"> | number
    collectorId?: StringFilter<"Collection"> | string
    date?: DateTimeFilter<"Collection"> | Date | string
    balanceRemaining?: IntFilter<"Collection"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Collection"> | $Enums.PaymentMethod
    remarks?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    collector?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CollectionOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountPaid?: SortOrder
    collectorId?: SortOrder
    date?: SortOrder
    balanceRemaining?: SortOrder
    paymentMethod?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    collector?: UserOrderByWithRelationInput
  }

  export type CollectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollectionWhereInput | CollectionWhereInput[]
    OR?: CollectionWhereInput[]
    NOT?: CollectionWhereInput | CollectionWhereInput[]
    customerId?: StringFilter<"Collection"> | string
    amountPaid?: IntFilter<"Collection"> | number
    collectorId?: StringFilter<"Collection"> | string
    date?: DateTimeFilter<"Collection"> | Date | string
    balanceRemaining?: IntFilter<"Collection"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Collection"> | $Enums.PaymentMethod
    remarks?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    collector?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CollectionOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountPaid?: SortOrder
    collectorId?: SortOrder
    date?: SortOrder
    balanceRemaining?: SortOrder
    paymentMethod?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CollectionCountOrderByAggregateInput
    _avg?: CollectionAvgOrderByAggregateInput
    _max?: CollectionMaxOrderByAggregateInput
    _min?: CollectionMinOrderByAggregateInput
    _sum?: CollectionSumOrderByAggregateInput
  }

  export type CollectionScalarWhereWithAggregatesInput = {
    AND?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    OR?: CollectionScalarWhereWithAggregatesInput[]
    NOT?: CollectionScalarWhereWithAggregatesInput | CollectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Collection"> | string
    customerId?: StringWithAggregatesFilter<"Collection"> | string
    amountPaid?: IntWithAggregatesFilter<"Collection"> | number
    collectorId?: StringWithAggregatesFilter<"Collection"> | string
    date?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    balanceRemaining?: IntWithAggregatesFilter<"Collection"> | number
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Collection"> | $Enums.PaymentMethod
    remarks?: StringNullableWithAggregatesFilter<"Collection"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Collection"> | Date | string
  }

  export type AuctionWhereInput = {
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    id?: StringFilter<"Auction"> | string
    chitSchemeId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    winningMemberId?: StringNullableFilter<"Auction"> | string | null
    amountReceived?: IntFilter<"Auction"> | number
    discountAmount?: IntFilter<"Auction"> | number
    newDailyPayment?: IntNullableFilter<"Auction"> | number | null
    previousDailyPayment?: IntNullableFilter<"Auction"> | number | null
    status?: EnumAuctionStatusFilter<"Auction"> | $Enums.AuctionStatus
    remarks?: StringNullableFilter<"Auction"> | string | null
    createdById?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
    chitScheme?: XOR<ChitSchemeRelationFilter, ChitSchemeWhereInput>
    winningMember?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuctionOrderByWithRelationInput = {
    id?: SortOrder
    chitSchemeId?: SortOrder
    auctionDate?: SortOrder
    winningMemberId?: SortOrderInput | SortOrder
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrderInput | SortOrder
    previousDailyPayment?: SortOrderInput | SortOrder
    status?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chitScheme?: ChitSchemeOrderByWithRelationInput
    winningMember?: CustomerOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type AuctionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    chitSchemeId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    winningMemberId?: StringNullableFilter<"Auction"> | string | null
    amountReceived?: IntFilter<"Auction"> | number
    discountAmount?: IntFilter<"Auction"> | number
    newDailyPayment?: IntNullableFilter<"Auction"> | number | null
    previousDailyPayment?: IntNullableFilter<"Auction"> | number | null
    status?: EnumAuctionStatusFilter<"Auction"> | $Enums.AuctionStatus
    remarks?: StringNullableFilter<"Auction"> | string | null
    createdById?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
    chitScheme?: XOR<ChitSchemeRelationFilter, ChitSchemeWhereInput>
    winningMember?: XOR<CustomerNullableRelationFilter, CustomerWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuctionOrderByWithAggregationInput = {
    id?: SortOrder
    chitSchemeId?: SortOrder
    auctionDate?: SortOrder
    winningMemberId?: SortOrderInput | SortOrder
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrderInput | SortOrder
    previousDailyPayment?: SortOrderInput | SortOrder
    status?: SortOrder
    remarks?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuctionCountOrderByAggregateInput
    _avg?: AuctionAvgOrderByAggregateInput
    _max?: AuctionMaxOrderByAggregateInput
    _min?: AuctionMinOrderByAggregateInput
    _sum?: AuctionSumOrderByAggregateInput
  }

  export type AuctionScalarWhereWithAggregatesInput = {
    AND?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    OR?: AuctionScalarWhereWithAggregatesInput[]
    NOT?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Auction"> | string
    chitSchemeId?: StringWithAggregatesFilter<"Auction"> | string
    auctionDate?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
    winningMemberId?: StringNullableWithAggregatesFilter<"Auction"> | string | null
    amountReceived?: IntWithAggregatesFilter<"Auction"> | number
    discountAmount?: IntWithAggregatesFilter<"Auction"> | number
    newDailyPayment?: IntNullableWithAggregatesFilter<"Auction"> | number | null
    previousDailyPayment?: IntNullableWithAggregatesFilter<"Auction"> | number | null
    status?: EnumAuctionStatusWithAggregatesFilter<"Auction"> | $Enums.AuctionStatus
    remarks?: StringNullableWithAggregatesFilter<"Auction"> | string | null
    createdById?: StringWithAggregatesFilter<"Auction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Auction"> | Date | string
  }

  export type PassbookEntryWhereInput = {
    AND?: PassbookEntryWhereInput | PassbookEntryWhereInput[]
    OR?: PassbookEntryWhereInput[]
    NOT?: PassbookEntryWhereInput | PassbookEntryWhereInput[]
    id?: StringFilter<"PassbookEntry"> | string
    customerSchemeId?: StringFilter<"PassbookEntry"> | string
    month?: IntFilter<"PassbookEntry"> | number
    date?: DateTimeFilter<"PassbookEntry"> | Date | string
    dailyPayment?: IntFilter<"PassbookEntry"> | number
    amount?: IntFilter<"PassbookEntry"> | number
    chittiAmount?: IntFilter<"PassbookEntry"> | number
    chitLiftingAmount?: IntNullableFilter<"PassbookEntry"> | number | null
    type?: EnumEntryTypeFilter<"PassbookEntry"> | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFilter<"PassbookEntry"> | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFilter<"PassbookEntry"> | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFilter<"PassbookEntry"> | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFilter<"PassbookEntry"> | Date | string
    updatedAt?: DateTimeFilter<"PassbookEntry"> | Date | string
    customerScheme?: XOR<CustomerSchemeRelationFilter, CustomerSchemeWhereInput>
  }

  export type PassbookEntryOrderByWithRelationInput = {
    id?: SortOrder
    customerSchemeId?: SortOrder
    month?: SortOrder
    date?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrderInput | SortOrder
    type?: SortOrder
    paymentMethod?: SortOrder
    paymentFrequency?: SortOrder
    chitLifting?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customerScheme?: CustomerSchemeOrderByWithRelationInput
  }

  export type PassbookEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PassbookEntryWhereInput | PassbookEntryWhereInput[]
    OR?: PassbookEntryWhereInput[]
    NOT?: PassbookEntryWhereInput | PassbookEntryWhereInput[]
    customerSchemeId?: StringFilter<"PassbookEntry"> | string
    month?: IntFilter<"PassbookEntry"> | number
    date?: DateTimeFilter<"PassbookEntry"> | Date | string
    dailyPayment?: IntFilter<"PassbookEntry"> | number
    amount?: IntFilter<"PassbookEntry"> | number
    chittiAmount?: IntFilter<"PassbookEntry"> | number
    chitLiftingAmount?: IntNullableFilter<"PassbookEntry"> | number | null
    type?: EnumEntryTypeFilter<"PassbookEntry"> | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFilter<"PassbookEntry"> | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFilter<"PassbookEntry"> | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFilter<"PassbookEntry"> | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFilter<"PassbookEntry"> | Date | string
    updatedAt?: DateTimeFilter<"PassbookEntry"> | Date | string
    customerScheme?: XOR<CustomerSchemeRelationFilter, CustomerSchemeWhereInput>
  }, "id">

  export type PassbookEntryOrderByWithAggregationInput = {
    id?: SortOrder
    customerSchemeId?: SortOrder
    month?: SortOrder
    date?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrderInput | SortOrder
    type?: SortOrder
    paymentMethod?: SortOrder
    paymentFrequency?: SortOrder
    chitLifting?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PassbookEntryCountOrderByAggregateInput
    _avg?: PassbookEntryAvgOrderByAggregateInput
    _max?: PassbookEntryMaxOrderByAggregateInput
    _min?: PassbookEntryMinOrderByAggregateInput
    _sum?: PassbookEntrySumOrderByAggregateInput
  }

  export type PassbookEntryScalarWhereWithAggregatesInput = {
    AND?: PassbookEntryScalarWhereWithAggregatesInput | PassbookEntryScalarWhereWithAggregatesInput[]
    OR?: PassbookEntryScalarWhereWithAggregatesInput[]
    NOT?: PassbookEntryScalarWhereWithAggregatesInput | PassbookEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PassbookEntry"> | string
    customerSchemeId?: StringWithAggregatesFilter<"PassbookEntry"> | string
    month?: IntWithAggregatesFilter<"PassbookEntry"> | number
    date?: DateTimeWithAggregatesFilter<"PassbookEntry"> | Date | string
    dailyPayment?: IntWithAggregatesFilter<"PassbookEntry"> | number
    amount?: IntWithAggregatesFilter<"PassbookEntry"> | number
    chittiAmount?: IntWithAggregatesFilter<"PassbookEntry"> | number
    chitLiftingAmount?: IntNullableWithAggregatesFilter<"PassbookEntry"> | number | null
    type?: EnumEntryTypeWithAggregatesFilter<"PassbookEntry"> | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"PassbookEntry"> | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyWithAggregatesFilter<"PassbookEntry"> | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusWithAggregatesFilter<"PassbookEntry"> | $Enums.ChitLiftingStatus
    createdAt?: DateTimeWithAggregatesFilter<"PassbookEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PassbookEntry"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutCollectorInput
    auctions?: AuctionCreateNestedManyWithoutCreatedByInput
    createdSchemes?: ChitSchemeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutCollectorInput
    auctions?: AuctionUncheckedCreateNestedManyWithoutCreatedByInput
    createdSchemes?: ChitSchemeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutCollectorNestedInput
    auctions?: AuctionUpdateManyWithoutCreatedByNestedInput
    createdSchemes?: ChitSchemeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutCollectorNestedInput
    auctions?: AuctionUncheckedUpdateManyWithoutCreatedByNestedInput
    createdSchemes?: ChitSchemeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChitSchemeCreateInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeCreateNestedManyWithoutSchemeInput
    auctions?: AuctionCreateNestedManyWithoutChitSchemeInput
    creator?: UserCreateNestedOneWithoutCreatedSchemesInput
  }

  export type ChitSchemeUncheckedCreateInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeUncheckedCreateNestedManyWithoutSchemeInput
    auctions?: AuctionUncheckedCreateNestedManyWithoutChitSchemeInput
  }

  export type ChitSchemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUpdateManyWithoutSchemeNestedInput
    auctions?: AuctionUpdateManyWithoutChitSchemeNestedInput
    creator?: UserUpdateOneWithoutCreatedSchemesNestedInput
  }

  export type ChitSchemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUncheckedUpdateManyWithoutSchemeNestedInput
    auctions?: AuctionUncheckedUpdateManyWithoutChitSchemeNestedInput
  }

  export type ChitSchemeCreateManyInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChitSchemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChitSchemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeCreateNestedManyWithoutCustomerInput
    collections?: CollectionCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeUncheckedCreateNestedManyWithoutCustomerInput
    collections?: CollectionUncheckedCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionUncheckedCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUpdateManyWithoutCustomerNestedInput
    collections?: CollectionUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUpdateManyWithoutWinningMemberNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUncheckedUpdateManyWithoutCustomerNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUncheckedUpdateManyWithoutWinningMemberNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSchemeCreateInput = {
    id?: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutSchemesInput
    scheme: ChitSchemeCreateNestedOneWithoutCustomerSchemesInput
    passbookEntries?: PassbookEntryCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeUncheckedCreateInput = {
    id?: string
    customerId: string
    schemeId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    passbookEntries?: PassbookEntryUncheckedCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutSchemesNestedInput
    scheme?: ChitSchemeUpdateOneRequiredWithoutCustomerSchemesNestedInput
    passbookEntries?: PassbookEntryUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    schemeId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passbookEntries?: PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeCreateManyInput = {
    id?: string
    customerId: string
    schemeId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSchemeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSchemeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    schemeId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionCreateInput = {
    id?: string
    amountPaid: number
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCollectionsInput
    collector: UserCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionUncheckedCreateInput = {
    id?: string
    customerId: string
    amountPaid: number
    collectorId: string
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCollectionsNestedInput
    collector?: UserUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    collectorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionCreateManyInput = {
    id?: string
    customerId: string
    amountPaid: number
    collectorId: string
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    collectorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionCreateInput = {
    id?: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chitScheme: ChitSchemeCreateNestedOneWithoutAuctionsInput
    winningMember?: CustomerCreateNestedOneWithoutWonAuctionsInput
    createdBy: UserCreateNestedOneWithoutAuctionsInput
  }

  export type AuctionUncheckedCreateInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chitScheme?: ChitSchemeUpdateOneRequiredWithoutAuctionsNestedInput
    winningMember?: CustomerUpdateOneWithoutWonAuctionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionCreateManyInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryCreateInput = {
    id?: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    customerScheme: CustomerSchemeCreateNestedOneWithoutPassbookEntriesInput
  }

  export type PassbookEntryUncheckedCreateInput = {
    id?: string
    customerSchemeId: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassbookEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerScheme?: CustomerSchemeUpdateOneRequiredWithoutPassbookEntriesNestedInput
  }

  export type PassbookEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerSchemeId?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryCreateManyInput = {
    id?: string
    customerSchemeId: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassbookEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerSchemeId?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CollectionListRelationFilter = {
    every?: CollectionWhereInput
    some?: CollectionWhereInput
    none?: CollectionWhereInput
  }

  export type AuctionListRelationFilter = {
    every?: AuctionWhereInput
    some?: AuctionWhereInput
    none?: AuctionWhereInput
  }

  export type ChitSchemeListRelationFilter = {
    every?: ChitSchemeWhereInput
    some?: ChitSchemeWhereInput
    none?: ChitSchemeWhereInput
  }

  export type CollectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChitSchemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumDurationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DurationType | EnumDurationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDurationTypeFilter<$PrismaModel> | $Enums.DurationType
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumSchemeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SchemeStatus | EnumSchemeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSchemeStatusFilter<$PrismaModel> | $Enums.SchemeStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CustomerSchemeListRelationFilter = {
    every?: CustomerSchemeWhereInput
    some?: CustomerSchemeWhereInput
    none?: CustomerSchemeWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CustomerSchemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChitSchemeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    chitValue?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    paymentType?: SortOrder
    dailyPayment?: SortOrder
    monthlyPayment?: SortOrder
    numberOfMembers?: SortOrder
    auctionRules?: SortOrder
    status?: SortOrder
    membersEnrolled?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lastDate?: SortOrder
    description?: SortOrder
    commissionRate?: SortOrder
    penaltyRate?: SortOrder
    minBidAmount?: SortOrder
    maxBidAmount?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChitSchemeAvgOrderByAggregateInput = {
    chitValue?: SortOrder
    duration?: SortOrder
    dailyPayment?: SortOrder
    monthlyPayment?: SortOrder
    numberOfMembers?: SortOrder
    membersEnrolled?: SortOrder
    commissionRate?: SortOrder
    penaltyRate?: SortOrder
    minBidAmount?: SortOrder
    maxBidAmount?: SortOrder
  }

  export type ChitSchemeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    chitValue?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    paymentType?: SortOrder
    dailyPayment?: SortOrder
    monthlyPayment?: SortOrder
    numberOfMembers?: SortOrder
    auctionRules?: SortOrder
    status?: SortOrder
    membersEnrolled?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lastDate?: SortOrder
    description?: SortOrder
    commissionRate?: SortOrder
    penaltyRate?: SortOrder
    minBidAmount?: SortOrder
    maxBidAmount?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChitSchemeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    chitValue?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    paymentType?: SortOrder
    dailyPayment?: SortOrder
    monthlyPayment?: SortOrder
    numberOfMembers?: SortOrder
    auctionRules?: SortOrder
    status?: SortOrder
    membersEnrolled?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    lastDate?: SortOrder
    description?: SortOrder
    commissionRate?: SortOrder
    penaltyRate?: SortOrder
    minBidAmount?: SortOrder
    maxBidAmount?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChitSchemeSumOrderByAggregateInput = {
    chitValue?: SortOrder
    duration?: SortOrder
    dailyPayment?: SortOrder
    monthlyPayment?: SortOrder
    numberOfMembers?: SortOrder
    membersEnrolled?: SortOrder
    commissionRate?: SortOrder
    penaltyRate?: SortOrder
    minBidAmount?: SortOrder
    maxBidAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumDurationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DurationType | EnumDurationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDurationTypeWithAggregatesFilter<$PrismaModel> | $Enums.DurationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDurationTypeFilter<$PrismaModel>
    _max?: NestedEnumDurationTypeFilter<$PrismaModel>
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumSchemeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SchemeStatus | EnumSchemeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSchemeStatusWithAggregatesFilter<$PrismaModel> | $Enums.SchemeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSchemeStatusFilter<$PrismaModel>
    _max?: NestedEnumSchemeStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumCustomerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusFilter<$PrismaModel> | $Enums.CustomerStatus
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mobile?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    balance?: SortOrder
    photo?: SortOrder
    documents?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    amountPerDay?: SortOrder
    duration?: SortOrder
    balance?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mobile?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    balance?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mobile?: SortOrder
    address?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    status?: SortOrder
    balance?: SortOrder
    photo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    amountPerDay?: SortOrder
    duration?: SortOrder
    balance?: SortOrder
  }

  export type EnumCustomerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel> | $Enums.CustomerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerStatusFilter<$PrismaModel>
    _max?: NestedEnumCustomerStatusFilter<$PrismaModel>
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type ChitSchemeRelationFilter = {
    is?: ChitSchemeWhereInput
    isNot?: ChitSchemeWhereInput
  }

  export type PassbookEntryListRelationFilter = {
    every?: PassbookEntryWhereInput
    some?: PassbookEntryWhereInput
    none?: PassbookEntryWhereInput
  }

  export type PassbookEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerSchemeCustomerIdSchemeIdCompoundUniqueInput = {
    customerId: string
    schemeId: string
  }

  export type CustomerSchemeCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    schemeId?: SortOrder
    enrolledAt?: SortOrder
    status?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSchemeAvgOrderByAggregateInput = {
    amountPerDay?: SortOrder
    duration?: SortOrder
    balance?: SortOrder
  }

  export type CustomerSchemeMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    schemeId?: SortOrder
    enrolledAt?: SortOrder
    status?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSchemeMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    schemeId?: SortOrder
    enrolledAt?: SortOrder
    status?: SortOrder
    amountPerDay?: SortOrder
    duration?: SortOrder
    durationType?: SortOrder
    startDate?: SortOrder
    lastDate?: SortOrder
    balance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSchemeSumOrderByAggregateInput = {
    amountPerDay?: SortOrder
    duration?: SortOrder
    balance?: SortOrder
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CollectionCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountPaid?: SortOrder
    collectorId?: SortOrder
    date?: SortOrder
    balanceRemaining?: SortOrder
    paymentMethod?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollectionAvgOrderByAggregateInput = {
    amountPaid?: SortOrder
    balanceRemaining?: SortOrder
  }

  export type CollectionMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountPaid?: SortOrder
    collectorId?: SortOrder
    date?: SortOrder
    balanceRemaining?: SortOrder
    paymentMethod?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollectionMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountPaid?: SortOrder
    collectorId?: SortOrder
    date?: SortOrder
    balanceRemaining?: SortOrder
    paymentMethod?: SortOrder
    remarks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollectionSumOrderByAggregateInput = {
    amountPaid?: SortOrder
    balanceRemaining?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumAuctionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuctionStatus | EnumAuctionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuctionStatusFilter<$PrismaModel> | $Enums.AuctionStatus
  }

  export type CustomerNullableRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type AuctionCountOrderByAggregateInput = {
    id?: SortOrder
    chitSchemeId?: SortOrder
    auctionDate?: SortOrder
    winningMemberId?: SortOrder
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrder
    previousDailyPayment?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionAvgOrderByAggregateInput = {
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrder
    previousDailyPayment?: SortOrder
  }

  export type AuctionMaxOrderByAggregateInput = {
    id?: SortOrder
    chitSchemeId?: SortOrder
    auctionDate?: SortOrder
    winningMemberId?: SortOrder
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrder
    previousDailyPayment?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionMinOrderByAggregateInput = {
    id?: SortOrder
    chitSchemeId?: SortOrder
    auctionDate?: SortOrder
    winningMemberId?: SortOrder
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrder
    previousDailyPayment?: SortOrder
    status?: SortOrder
    remarks?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuctionSumOrderByAggregateInput = {
    amountReceived?: SortOrder
    discountAmount?: SortOrder
    newDailyPayment?: SortOrder
    previousDailyPayment?: SortOrder
  }

  export type EnumAuctionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuctionStatus | EnumAuctionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuctionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuctionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuctionStatusFilter<$PrismaModel>
    _max?: NestedEnumAuctionStatusFilter<$PrismaModel>
  }

  export type EnumEntryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntryType | EnumEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntryTypeFilter<$PrismaModel> | $Enums.EntryType
  }

  export type EnumPaymentFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFrequencyFilter<$PrismaModel> | $Enums.PaymentFrequency
  }

  export type EnumChitLiftingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ChitLiftingStatus | EnumChitLiftingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChitLiftingStatusFilter<$PrismaModel> | $Enums.ChitLiftingStatus
  }

  export type CustomerSchemeRelationFilter = {
    is?: CustomerSchemeWhereInput
    isNot?: CustomerSchemeWhereInput
  }

  export type PassbookEntryCountOrderByAggregateInput = {
    id?: SortOrder
    customerSchemeId?: SortOrder
    month?: SortOrder
    date?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrder
    type?: SortOrder
    paymentMethod?: SortOrder
    paymentFrequency?: SortOrder
    chitLifting?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassbookEntryAvgOrderByAggregateInput = {
    month?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrder
  }

  export type PassbookEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    customerSchemeId?: SortOrder
    month?: SortOrder
    date?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrder
    type?: SortOrder
    paymentMethod?: SortOrder
    paymentFrequency?: SortOrder
    chitLifting?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassbookEntryMinOrderByAggregateInput = {
    id?: SortOrder
    customerSchemeId?: SortOrder
    month?: SortOrder
    date?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrder
    type?: SortOrder
    paymentMethod?: SortOrder
    paymentFrequency?: SortOrder
    chitLifting?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PassbookEntrySumOrderByAggregateInput = {
    month?: SortOrder
    dailyPayment?: SortOrder
    amount?: SortOrder
    chittiAmount?: SortOrder
    chitLiftingAmount?: SortOrder
  }

  export type EnumEntryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntryType | EnumEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntryTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntryTypeFilter<$PrismaModel>
    _max?: NestedEnumEntryTypeFilter<$PrismaModel>
  }

  export type EnumPaymentFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.PaymentFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFrequencyFilter<$PrismaModel>
    _max?: NestedEnumPaymentFrequencyFilter<$PrismaModel>
  }

  export type EnumChitLiftingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChitLiftingStatus | EnumChitLiftingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChitLiftingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ChitLiftingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChitLiftingStatusFilter<$PrismaModel>
    _max?: NestedEnumChitLiftingStatusFilter<$PrismaModel>
  }

  export type CollectionCreateNestedManyWithoutCollectorInput = {
    create?: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput> | CollectionCreateWithoutCollectorInput[] | CollectionUncheckedCreateWithoutCollectorInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCollectorInput | CollectionCreateOrConnectWithoutCollectorInput[]
    createMany?: CollectionCreateManyCollectorInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type AuctionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput> | AuctionCreateWithoutCreatedByInput[] | AuctionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutCreatedByInput | AuctionCreateOrConnectWithoutCreatedByInput[]
    createMany?: AuctionCreateManyCreatedByInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type ChitSchemeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput> | ChitSchemeCreateWithoutCreatorInput[] | ChitSchemeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCreatorInput | ChitSchemeCreateOrConnectWithoutCreatorInput[]
    createMany?: ChitSchemeCreateManyCreatorInputEnvelope
    connect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
  }

  export type CollectionUncheckedCreateNestedManyWithoutCollectorInput = {
    create?: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput> | CollectionCreateWithoutCollectorInput[] | CollectionUncheckedCreateWithoutCollectorInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCollectorInput | CollectionCreateOrConnectWithoutCollectorInput[]
    createMany?: CollectionCreateManyCollectorInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type AuctionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput> | AuctionCreateWithoutCreatedByInput[] | AuctionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutCreatedByInput | AuctionCreateOrConnectWithoutCreatedByInput[]
    createMany?: AuctionCreateManyCreatedByInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type ChitSchemeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput> | ChitSchemeCreateWithoutCreatorInput[] | ChitSchemeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCreatorInput | ChitSchemeCreateOrConnectWithoutCreatorInput[]
    createMany?: ChitSchemeCreateManyCreatorInputEnvelope
    connect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CollectionUpdateManyWithoutCollectorNestedInput = {
    create?: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput> | CollectionCreateWithoutCollectorInput[] | CollectionUncheckedCreateWithoutCollectorInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCollectorInput | CollectionCreateOrConnectWithoutCollectorInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutCollectorInput | CollectionUpsertWithWhereUniqueWithoutCollectorInput[]
    createMany?: CollectionCreateManyCollectorInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutCollectorInput | CollectionUpdateWithWhereUniqueWithoutCollectorInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutCollectorInput | CollectionUpdateManyWithWhereWithoutCollectorInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type AuctionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput> | AuctionCreateWithoutCreatedByInput[] | AuctionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutCreatedByInput | AuctionCreateOrConnectWithoutCreatedByInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutCreatedByInput | AuctionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AuctionCreateManyCreatedByInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutCreatedByInput | AuctionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutCreatedByInput | AuctionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type ChitSchemeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput> | ChitSchemeCreateWithoutCreatorInput[] | ChitSchemeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCreatorInput | ChitSchemeCreateOrConnectWithoutCreatorInput[]
    upsert?: ChitSchemeUpsertWithWhereUniqueWithoutCreatorInput | ChitSchemeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChitSchemeCreateManyCreatorInputEnvelope
    set?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    disconnect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    delete?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    connect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    update?: ChitSchemeUpdateWithWhereUniqueWithoutCreatorInput | ChitSchemeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChitSchemeUpdateManyWithWhereWithoutCreatorInput | ChitSchemeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChitSchemeScalarWhereInput | ChitSchemeScalarWhereInput[]
  }

  export type CollectionUncheckedUpdateManyWithoutCollectorNestedInput = {
    create?: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput> | CollectionCreateWithoutCollectorInput[] | CollectionUncheckedCreateWithoutCollectorInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCollectorInput | CollectionCreateOrConnectWithoutCollectorInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutCollectorInput | CollectionUpsertWithWhereUniqueWithoutCollectorInput[]
    createMany?: CollectionCreateManyCollectorInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutCollectorInput | CollectionUpdateWithWhereUniqueWithoutCollectorInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutCollectorInput | CollectionUpdateManyWithWhereWithoutCollectorInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type AuctionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput> | AuctionCreateWithoutCreatedByInput[] | AuctionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutCreatedByInput | AuctionCreateOrConnectWithoutCreatedByInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutCreatedByInput | AuctionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AuctionCreateManyCreatedByInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutCreatedByInput | AuctionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutCreatedByInput | AuctionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type ChitSchemeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput> | ChitSchemeCreateWithoutCreatorInput[] | ChitSchemeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCreatorInput | ChitSchemeCreateOrConnectWithoutCreatorInput[]
    upsert?: ChitSchemeUpsertWithWhereUniqueWithoutCreatorInput | ChitSchemeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ChitSchemeCreateManyCreatorInputEnvelope
    set?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    disconnect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    delete?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    connect?: ChitSchemeWhereUniqueInput | ChitSchemeWhereUniqueInput[]
    update?: ChitSchemeUpdateWithWhereUniqueWithoutCreatorInput | ChitSchemeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ChitSchemeUpdateManyWithWhereWithoutCreatorInput | ChitSchemeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ChitSchemeScalarWhereInput | ChitSchemeScalarWhereInput[]
  }

  export type CustomerSchemeCreateNestedManyWithoutSchemeInput = {
    create?: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput> | CustomerSchemeCreateWithoutSchemeInput[] | CustomerSchemeUncheckedCreateWithoutSchemeInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutSchemeInput | CustomerSchemeCreateOrConnectWithoutSchemeInput[]
    createMany?: CustomerSchemeCreateManySchemeInputEnvelope
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
  }

  export type AuctionCreateNestedManyWithoutChitSchemeInput = {
    create?: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput> | AuctionCreateWithoutChitSchemeInput[] | AuctionUncheckedCreateWithoutChitSchemeInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutChitSchemeInput | AuctionCreateOrConnectWithoutChitSchemeInput[]
    createMany?: AuctionCreateManyChitSchemeInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedSchemesInput = {
    create?: XOR<UserCreateWithoutCreatedSchemesInput, UserUncheckedCreateWithoutCreatedSchemesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchemesInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerSchemeUncheckedCreateNestedManyWithoutSchemeInput = {
    create?: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput> | CustomerSchemeCreateWithoutSchemeInput[] | CustomerSchemeUncheckedCreateWithoutSchemeInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutSchemeInput | CustomerSchemeCreateOrConnectWithoutSchemeInput[]
    createMany?: CustomerSchemeCreateManySchemeInputEnvelope
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
  }

  export type AuctionUncheckedCreateNestedManyWithoutChitSchemeInput = {
    create?: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput> | AuctionCreateWithoutChitSchemeInput[] | AuctionUncheckedCreateWithoutChitSchemeInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutChitSchemeInput | AuctionCreateOrConnectWithoutChitSchemeInput[]
    createMany?: AuctionCreateManyChitSchemeInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumDurationTypeFieldUpdateOperationsInput = {
    set?: $Enums.DurationType
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSchemeStatusFieldUpdateOperationsInput = {
    set?: $Enums.SchemeStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CustomerSchemeUpdateManyWithoutSchemeNestedInput = {
    create?: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput> | CustomerSchemeCreateWithoutSchemeInput[] | CustomerSchemeUncheckedCreateWithoutSchemeInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutSchemeInput | CustomerSchemeCreateOrConnectWithoutSchemeInput[]
    upsert?: CustomerSchemeUpsertWithWhereUniqueWithoutSchemeInput | CustomerSchemeUpsertWithWhereUniqueWithoutSchemeInput[]
    createMany?: CustomerSchemeCreateManySchemeInputEnvelope
    set?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    disconnect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    delete?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    update?: CustomerSchemeUpdateWithWhereUniqueWithoutSchemeInput | CustomerSchemeUpdateWithWhereUniqueWithoutSchemeInput[]
    updateMany?: CustomerSchemeUpdateManyWithWhereWithoutSchemeInput | CustomerSchemeUpdateManyWithWhereWithoutSchemeInput[]
    deleteMany?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
  }

  export type AuctionUpdateManyWithoutChitSchemeNestedInput = {
    create?: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput> | AuctionCreateWithoutChitSchemeInput[] | AuctionUncheckedCreateWithoutChitSchemeInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutChitSchemeInput | AuctionCreateOrConnectWithoutChitSchemeInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutChitSchemeInput | AuctionUpsertWithWhereUniqueWithoutChitSchemeInput[]
    createMany?: AuctionCreateManyChitSchemeInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutChitSchemeInput | AuctionUpdateWithWhereUniqueWithoutChitSchemeInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutChitSchemeInput | AuctionUpdateManyWithWhereWithoutChitSchemeInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedSchemesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSchemesInput, UserUncheckedCreateWithoutCreatedSchemesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchemesInput
    upsert?: UserUpsertWithoutCreatedSchemesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSchemesInput, UserUpdateWithoutCreatedSchemesInput>, UserUncheckedUpdateWithoutCreatedSchemesInput>
  }

  export type CustomerSchemeUncheckedUpdateManyWithoutSchemeNestedInput = {
    create?: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput> | CustomerSchemeCreateWithoutSchemeInput[] | CustomerSchemeUncheckedCreateWithoutSchemeInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutSchemeInput | CustomerSchemeCreateOrConnectWithoutSchemeInput[]
    upsert?: CustomerSchemeUpsertWithWhereUniqueWithoutSchemeInput | CustomerSchemeUpsertWithWhereUniqueWithoutSchemeInput[]
    createMany?: CustomerSchemeCreateManySchemeInputEnvelope
    set?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    disconnect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    delete?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    update?: CustomerSchemeUpdateWithWhereUniqueWithoutSchemeInput | CustomerSchemeUpdateWithWhereUniqueWithoutSchemeInput[]
    updateMany?: CustomerSchemeUpdateManyWithWhereWithoutSchemeInput | CustomerSchemeUpdateManyWithWhereWithoutSchemeInput[]
    deleteMany?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
  }

  export type AuctionUncheckedUpdateManyWithoutChitSchemeNestedInput = {
    create?: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput> | AuctionCreateWithoutChitSchemeInput[] | AuctionUncheckedCreateWithoutChitSchemeInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutChitSchemeInput | AuctionCreateOrConnectWithoutChitSchemeInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutChitSchemeInput | AuctionUpsertWithWhereUniqueWithoutChitSchemeInput[]
    createMany?: AuctionCreateManyChitSchemeInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutChitSchemeInput | AuctionUpdateWithWhereUniqueWithoutChitSchemeInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutChitSchemeInput | AuctionUpdateManyWithWhereWithoutChitSchemeInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type CustomerCreatedocumentsInput = {
    set: string[]
  }

  export type CustomerSchemeCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput> | CustomerSchemeCreateWithoutCustomerInput[] | CustomerSchemeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutCustomerInput | CustomerSchemeCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerSchemeCreateManyCustomerInputEnvelope
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
  }

  export type CollectionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput> | CollectionCreateWithoutCustomerInput[] | CollectionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCustomerInput | CollectionCreateOrConnectWithoutCustomerInput[]
    createMany?: CollectionCreateManyCustomerInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type AuctionCreateNestedManyWithoutWinningMemberInput = {
    create?: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput> | AuctionCreateWithoutWinningMemberInput[] | AuctionUncheckedCreateWithoutWinningMemberInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutWinningMemberInput | AuctionCreateOrConnectWithoutWinningMemberInput[]
    createMany?: AuctionCreateManyWinningMemberInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type CustomerSchemeUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput> | CustomerSchemeCreateWithoutCustomerInput[] | CustomerSchemeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutCustomerInput | CustomerSchemeCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerSchemeCreateManyCustomerInputEnvelope
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
  }

  export type CollectionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput> | CollectionCreateWithoutCustomerInput[] | CollectionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCustomerInput | CollectionCreateOrConnectWithoutCustomerInput[]
    createMany?: CollectionCreateManyCustomerInputEnvelope
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
  }

  export type AuctionUncheckedCreateNestedManyWithoutWinningMemberInput = {
    create?: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput> | AuctionCreateWithoutWinningMemberInput[] | AuctionUncheckedCreateWithoutWinningMemberInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutWinningMemberInput | AuctionCreateOrConnectWithoutWinningMemberInput[]
    createMany?: AuctionCreateManyWinningMemberInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type EnumCustomerStatusFieldUpdateOperationsInput = {
    set?: $Enums.CustomerStatus
  }

  export type CustomerUpdatedocumentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CustomerSchemeUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput> | CustomerSchemeCreateWithoutCustomerInput[] | CustomerSchemeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutCustomerInput | CustomerSchemeCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerSchemeUpsertWithWhereUniqueWithoutCustomerInput | CustomerSchemeUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerSchemeCreateManyCustomerInputEnvelope
    set?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    disconnect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    delete?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    update?: CustomerSchemeUpdateWithWhereUniqueWithoutCustomerInput | CustomerSchemeUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerSchemeUpdateManyWithWhereWithoutCustomerInput | CustomerSchemeUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
  }

  export type CollectionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput> | CollectionCreateWithoutCustomerInput[] | CollectionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCustomerInput | CollectionCreateOrConnectWithoutCustomerInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutCustomerInput | CollectionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CollectionCreateManyCustomerInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutCustomerInput | CollectionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutCustomerInput | CollectionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type AuctionUpdateManyWithoutWinningMemberNestedInput = {
    create?: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput> | AuctionCreateWithoutWinningMemberInput[] | AuctionUncheckedCreateWithoutWinningMemberInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutWinningMemberInput | AuctionCreateOrConnectWithoutWinningMemberInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutWinningMemberInput | AuctionUpsertWithWhereUniqueWithoutWinningMemberInput[]
    createMany?: AuctionCreateManyWinningMemberInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutWinningMemberInput | AuctionUpdateWithWhereUniqueWithoutWinningMemberInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutWinningMemberInput | AuctionUpdateManyWithWhereWithoutWinningMemberInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type CustomerSchemeUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput> | CustomerSchemeCreateWithoutCustomerInput[] | CustomerSchemeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutCustomerInput | CustomerSchemeCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerSchemeUpsertWithWhereUniqueWithoutCustomerInput | CustomerSchemeUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerSchemeCreateManyCustomerInputEnvelope
    set?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    disconnect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    delete?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    connect?: CustomerSchemeWhereUniqueInput | CustomerSchemeWhereUniqueInput[]
    update?: CustomerSchemeUpdateWithWhereUniqueWithoutCustomerInput | CustomerSchemeUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerSchemeUpdateManyWithWhereWithoutCustomerInput | CustomerSchemeUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
  }

  export type CollectionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput> | CollectionCreateWithoutCustomerInput[] | CollectionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CollectionCreateOrConnectWithoutCustomerInput | CollectionCreateOrConnectWithoutCustomerInput[]
    upsert?: CollectionUpsertWithWhereUniqueWithoutCustomerInput | CollectionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CollectionCreateManyCustomerInputEnvelope
    set?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    disconnect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    delete?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    connect?: CollectionWhereUniqueInput | CollectionWhereUniqueInput[]
    update?: CollectionUpdateWithWhereUniqueWithoutCustomerInput | CollectionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CollectionUpdateManyWithWhereWithoutCustomerInput | CollectionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
  }

  export type AuctionUncheckedUpdateManyWithoutWinningMemberNestedInput = {
    create?: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput> | AuctionCreateWithoutWinningMemberInput[] | AuctionUncheckedCreateWithoutWinningMemberInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutWinningMemberInput | AuctionCreateOrConnectWithoutWinningMemberInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutWinningMemberInput | AuctionUpsertWithWhereUniqueWithoutWinningMemberInput[]
    createMany?: AuctionCreateManyWinningMemberInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutWinningMemberInput | AuctionUpdateWithWhereUniqueWithoutWinningMemberInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutWinningMemberInput | AuctionUpdateManyWithWhereWithoutWinningMemberInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutSchemesInput = {
    create?: XOR<CustomerCreateWithoutSchemesInput, CustomerUncheckedCreateWithoutSchemesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSchemesInput
    connect?: CustomerWhereUniqueInput
  }

  export type ChitSchemeCreateNestedOneWithoutCustomerSchemesInput = {
    create?: XOR<ChitSchemeCreateWithoutCustomerSchemesInput, ChitSchemeUncheckedCreateWithoutCustomerSchemesInput>
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCustomerSchemesInput
    connect?: ChitSchemeWhereUniqueInput
  }

  export type PassbookEntryCreateNestedManyWithoutCustomerSchemeInput = {
    create?: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput> | PassbookEntryCreateWithoutCustomerSchemeInput[] | PassbookEntryUncheckedCreateWithoutCustomerSchemeInput[]
    connectOrCreate?: PassbookEntryCreateOrConnectWithoutCustomerSchemeInput | PassbookEntryCreateOrConnectWithoutCustomerSchemeInput[]
    createMany?: PassbookEntryCreateManyCustomerSchemeInputEnvelope
    connect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
  }

  export type PassbookEntryUncheckedCreateNestedManyWithoutCustomerSchemeInput = {
    create?: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput> | PassbookEntryCreateWithoutCustomerSchemeInput[] | PassbookEntryUncheckedCreateWithoutCustomerSchemeInput[]
    connectOrCreate?: PassbookEntryCreateOrConnectWithoutCustomerSchemeInput | PassbookEntryCreateOrConnectWithoutCustomerSchemeInput[]
    createMany?: PassbookEntryCreateManyCustomerSchemeInputEnvelope
    connect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
  }

  export type CustomerUpdateOneRequiredWithoutSchemesNestedInput = {
    create?: XOR<CustomerCreateWithoutSchemesInput, CustomerUncheckedCreateWithoutSchemesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSchemesInput
    upsert?: CustomerUpsertWithoutSchemesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSchemesInput, CustomerUpdateWithoutSchemesInput>, CustomerUncheckedUpdateWithoutSchemesInput>
  }

  export type ChitSchemeUpdateOneRequiredWithoutCustomerSchemesNestedInput = {
    create?: XOR<ChitSchemeCreateWithoutCustomerSchemesInput, ChitSchemeUncheckedCreateWithoutCustomerSchemesInput>
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutCustomerSchemesInput
    upsert?: ChitSchemeUpsertWithoutCustomerSchemesInput
    connect?: ChitSchemeWhereUniqueInput
    update?: XOR<XOR<ChitSchemeUpdateToOneWithWhereWithoutCustomerSchemesInput, ChitSchemeUpdateWithoutCustomerSchemesInput>, ChitSchemeUncheckedUpdateWithoutCustomerSchemesInput>
  }

  export type PassbookEntryUpdateManyWithoutCustomerSchemeNestedInput = {
    create?: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput> | PassbookEntryCreateWithoutCustomerSchemeInput[] | PassbookEntryUncheckedCreateWithoutCustomerSchemeInput[]
    connectOrCreate?: PassbookEntryCreateOrConnectWithoutCustomerSchemeInput | PassbookEntryCreateOrConnectWithoutCustomerSchemeInput[]
    upsert?: PassbookEntryUpsertWithWhereUniqueWithoutCustomerSchemeInput | PassbookEntryUpsertWithWhereUniqueWithoutCustomerSchemeInput[]
    createMany?: PassbookEntryCreateManyCustomerSchemeInputEnvelope
    set?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    disconnect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    delete?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    connect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    update?: PassbookEntryUpdateWithWhereUniqueWithoutCustomerSchemeInput | PassbookEntryUpdateWithWhereUniqueWithoutCustomerSchemeInput[]
    updateMany?: PassbookEntryUpdateManyWithWhereWithoutCustomerSchemeInput | PassbookEntryUpdateManyWithWhereWithoutCustomerSchemeInput[]
    deleteMany?: PassbookEntryScalarWhereInput | PassbookEntryScalarWhereInput[]
  }

  export type PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeNestedInput = {
    create?: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput> | PassbookEntryCreateWithoutCustomerSchemeInput[] | PassbookEntryUncheckedCreateWithoutCustomerSchemeInput[]
    connectOrCreate?: PassbookEntryCreateOrConnectWithoutCustomerSchemeInput | PassbookEntryCreateOrConnectWithoutCustomerSchemeInput[]
    upsert?: PassbookEntryUpsertWithWhereUniqueWithoutCustomerSchemeInput | PassbookEntryUpsertWithWhereUniqueWithoutCustomerSchemeInput[]
    createMany?: PassbookEntryCreateManyCustomerSchemeInputEnvelope
    set?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    disconnect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    delete?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    connect?: PassbookEntryWhereUniqueInput | PassbookEntryWhereUniqueInput[]
    update?: PassbookEntryUpdateWithWhereUniqueWithoutCustomerSchemeInput | PassbookEntryUpdateWithWhereUniqueWithoutCustomerSchemeInput[]
    updateMany?: PassbookEntryUpdateManyWithWhereWithoutCustomerSchemeInput | PassbookEntryUpdateManyWithWhereWithoutCustomerSchemeInput[]
    deleteMany?: PassbookEntryScalarWhereInput | PassbookEntryScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<CustomerCreateWithoutCollectionsInput, CustomerUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCollectionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type CustomerUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<CustomerCreateWithoutCollectionsInput, CustomerUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCollectionsInput
    upsert?: CustomerUpsertWithoutCollectionsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCollectionsInput, CustomerUpdateWithoutCollectionsInput>, CustomerUncheckedUpdateWithoutCollectionsInput>
  }

  export type UserUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    upsert?: UserUpsertWithoutCollectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollectionsInput, UserUpdateWithoutCollectionsInput>, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type ChitSchemeCreateNestedOneWithoutAuctionsInput = {
    create?: XOR<ChitSchemeCreateWithoutAuctionsInput, ChitSchemeUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutAuctionsInput
    connect?: ChitSchemeWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutWonAuctionsInput = {
    create?: XOR<CustomerCreateWithoutWonAuctionsInput, CustomerUncheckedCreateWithoutWonAuctionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutWonAuctionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuctionsInput = {
    create?: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuctionStatusFieldUpdateOperationsInput = {
    set?: $Enums.AuctionStatus
  }

  export type ChitSchemeUpdateOneRequiredWithoutAuctionsNestedInput = {
    create?: XOR<ChitSchemeCreateWithoutAuctionsInput, ChitSchemeUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: ChitSchemeCreateOrConnectWithoutAuctionsInput
    upsert?: ChitSchemeUpsertWithoutAuctionsInput
    connect?: ChitSchemeWhereUniqueInput
    update?: XOR<XOR<ChitSchemeUpdateToOneWithWhereWithoutAuctionsInput, ChitSchemeUpdateWithoutAuctionsInput>, ChitSchemeUncheckedUpdateWithoutAuctionsInput>
  }

  export type CustomerUpdateOneWithoutWonAuctionsNestedInput = {
    create?: XOR<CustomerCreateWithoutWonAuctionsInput, CustomerUncheckedCreateWithoutWonAuctionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutWonAuctionsInput
    upsert?: CustomerUpsertWithoutWonAuctionsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutWonAuctionsInput, CustomerUpdateWithoutWonAuctionsInput>, CustomerUncheckedUpdateWithoutWonAuctionsInput>
  }

  export type UserUpdateOneRequiredWithoutAuctionsNestedInput = {
    create?: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionsInput
    upsert?: UserUpsertWithoutAuctionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuctionsInput, UserUpdateWithoutAuctionsInput>, UserUncheckedUpdateWithoutAuctionsInput>
  }

  export type CustomerSchemeCreateNestedOneWithoutPassbookEntriesInput = {
    create?: XOR<CustomerSchemeCreateWithoutPassbookEntriesInput, CustomerSchemeUncheckedCreateWithoutPassbookEntriesInput>
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutPassbookEntriesInput
    connect?: CustomerSchemeWhereUniqueInput
  }

  export type EnumEntryTypeFieldUpdateOperationsInput = {
    set?: $Enums.EntryType
  }

  export type EnumPaymentFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.PaymentFrequency
  }

  export type EnumChitLiftingStatusFieldUpdateOperationsInput = {
    set?: $Enums.ChitLiftingStatus
  }

  export type CustomerSchemeUpdateOneRequiredWithoutPassbookEntriesNestedInput = {
    create?: XOR<CustomerSchemeCreateWithoutPassbookEntriesInput, CustomerSchemeUncheckedCreateWithoutPassbookEntriesInput>
    connectOrCreate?: CustomerSchemeCreateOrConnectWithoutPassbookEntriesInput
    upsert?: CustomerSchemeUpsertWithoutPassbookEntriesInput
    connect?: CustomerSchemeWhereUniqueInput
    update?: XOR<XOR<CustomerSchemeUpdateToOneWithWhereWithoutPassbookEntriesInput, CustomerSchemeUpdateWithoutPassbookEntriesInput>, CustomerSchemeUncheckedUpdateWithoutPassbookEntriesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDurationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DurationType | EnumDurationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDurationTypeFilter<$PrismaModel> | $Enums.DurationType
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumSchemeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SchemeStatus | EnumSchemeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSchemeStatusFilter<$PrismaModel> | $Enums.SchemeStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumDurationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DurationType | EnumDurationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DurationType[] | ListEnumDurationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDurationTypeWithAggregatesFilter<$PrismaModel> | $Enums.DurationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDurationTypeFilter<$PrismaModel>
    _max?: NestedEnumDurationTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumSchemeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SchemeStatus | EnumSchemeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchemeStatus[] | ListEnumSchemeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSchemeStatusWithAggregatesFilter<$PrismaModel> | $Enums.SchemeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSchemeStatusFilter<$PrismaModel>
    _max?: NestedEnumSchemeStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumCustomerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusFilter<$PrismaModel> | $Enums.CustomerStatus
  }

  export type NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel> | $Enums.CustomerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerStatusFilter<$PrismaModel>
    _max?: NestedEnumCustomerStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumAuctionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AuctionStatus | EnumAuctionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuctionStatusFilter<$PrismaModel> | $Enums.AuctionStatus
  }

  export type NestedEnumAuctionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuctionStatus | EnumAuctionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuctionStatus[] | ListEnumAuctionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAuctionStatusWithAggregatesFilter<$PrismaModel> | $Enums.AuctionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuctionStatusFilter<$PrismaModel>
    _max?: NestedEnumAuctionStatusFilter<$PrismaModel>
  }

  export type NestedEnumEntryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EntryType | EnumEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntryTypeFilter<$PrismaModel> | $Enums.EntryType
  }

  export type NestedEnumPaymentFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFrequencyFilter<$PrismaModel> | $Enums.PaymentFrequency
  }

  export type NestedEnumChitLiftingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ChitLiftingStatus | EnumChitLiftingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChitLiftingStatusFilter<$PrismaModel> | $Enums.ChitLiftingStatus
  }

  export type NestedEnumEntryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EntryType | EnumEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EntryType[] | ListEnumEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEntryTypeWithAggregatesFilter<$PrismaModel> | $Enums.EntryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEntryTypeFilter<$PrismaModel>
    _max?: NestedEnumEntryTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentFrequency | EnumPaymentFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentFrequency[] | ListEnumPaymentFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.PaymentFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFrequencyFilter<$PrismaModel>
    _max?: NestedEnumPaymentFrequencyFilter<$PrismaModel>
  }

  export type NestedEnumChitLiftingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChitLiftingStatus | EnumChitLiftingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChitLiftingStatus[] | ListEnumChitLiftingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumChitLiftingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ChitLiftingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChitLiftingStatusFilter<$PrismaModel>
    _max?: NestedEnumChitLiftingStatusFilter<$PrismaModel>
  }

  export type CollectionCreateWithoutCollectorInput = {
    id?: string
    amountPaid: number
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionUncheckedCreateWithoutCollectorInput = {
    id?: string
    customerId: string
    amountPaid: number
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionCreateOrConnectWithoutCollectorInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput>
  }

  export type CollectionCreateManyCollectorInputEnvelope = {
    data: CollectionCreateManyCollectorInput | CollectionCreateManyCollectorInput[]
    skipDuplicates?: boolean
  }

  export type AuctionCreateWithoutCreatedByInput = {
    id?: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chitScheme: ChitSchemeCreateNestedOneWithoutAuctionsInput
    winningMember?: CustomerCreateNestedOneWithoutWonAuctionsInput
  }

  export type AuctionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateOrConnectWithoutCreatedByInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput>
  }

  export type AuctionCreateManyCreatedByInputEnvelope = {
    data: AuctionCreateManyCreatedByInput | AuctionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ChitSchemeCreateWithoutCreatorInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeCreateNestedManyWithoutSchemeInput
    auctions?: AuctionCreateNestedManyWithoutChitSchemeInput
  }

  export type ChitSchemeUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeUncheckedCreateNestedManyWithoutSchemeInput
    auctions?: AuctionUncheckedCreateNestedManyWithoutChitSchemeInput
  }

  export type ChitSchemeCreateOrConnectWithoutCreatorInput = {
    where: ChitSchemeWhereUniqueInput
    create: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput>
  }

  export type ChitSchemeCreateManyCreatorInputEnvelope = {
    data: ChitSchemeCreateManyCreatorInput | ChitSchemeCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type CollectionUpsertWithWhereUniqueWithoutCollectorInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutCollectorInput, CollectionUncheckedUpdateWithoutCollectorInput>
    create: XOR<CollectionCreateWithoutCollectorInput, CollectionUncheckedCreateWithoutCollectorInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutCollectorInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutCollectorInput, CollectionUncheckedUpdateWithoutCollectorInput>
  }

  export type CollectionUpdateManyWithWhereWithoutCollectorInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutCollectorInput>
  }

  export type CollectionScalarWhereInput = {
    AND?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    OR?: CollectionScalarWhereInput[]
    NOT?: CollectionScalarWhereInput | CollectionScalarWhereInput[]
    id?: StringFilter<"Collection"> | string
    customerId?: StringFilter<"Collection"> | string
    amountPaid?: IntFilter<"Collection"> | number
    collectorId?: StringFilter<"Collection"> | string
    date?: DateTimeFilter<"Collection"> | Date | string
    balanceRemaining?: IntFilter<"Collection"> | number
    paymentMethod?: EnumPaymentMethodFilter<"Collection"> | $Enums.PaymentMethod
    remarks?: StringNullableFilter<"Collection"> | string | null
    createdAt?: DateTimeFilter<"Collection"> | Date | string
    updatedAt?: DateTimeFilter<"Collection"> | Date | string
  }

  export type AuctionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AuctionWhereUniqueInput
    update: XOR<AuctionUpdateWithoutCreatedByInput, AuctionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AuctionCreateWithoutCreatedByInput, AuctionUncheckedCreateWithoutCreatedByInput>
  }

  export type AuctionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AuctionWhereUniqueInput
    data: XOR<AuctionUpdateWithoutCreatedByInput, AuctionUncheckedUpdateWithoutCreatedByInput>
  }

  export type AuctionUpdateManyWithWhereWithoutCreatedByInput = {
    where: AuctionScalarWhereInput
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AuctionScalarWhereInput = {
    AND?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    OR?: AuctionScalarWhereInput[]
    NOT?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    id?: StringFilter<"Auction"> | string
    chitSchemeId?: StringFilter<"Auction"> | string
    auctionDate?: DateTimeFilter<"Auction"> | Date | string
    winningMemberId?: StringNullableFilter<"Auction"> | string | null
    amountReceived?: IntFilter<"Auction"> | number
    discountAmount?: IntFilter<"Auction"> | number
    newDailyPayment?: IntNullableFilter<"Auction"> | number | null
    previousDailyPayment?: IntNullableFilter<"Auction"> | number | null
    status?: EnumAuctionStatusFilter<"Auction"> | $Enums.AuctionStatus
    remarks?: StringNullableFilter<"Auction"> | string | null
    createdById?: StringFilter<"Auction"> | string
    createdAt?: DateTimeFilter<"Auction"> | Date | string
    updatedAt?: DateTimeFilter<"Auction"> | Date | string
  }

  export type ChitSchemeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ChitSchemeWhereUniqueInput
    update: XOR<ChitSchemeUpdateWithoutCreatorInput, ChitSchemeUncheckedUpdateWithoutCreatorInput>
    create: XOR<ChitSchemeCreateWithoutCreatorInput, ChitSchemeUncheckedCreateWithoutCreatorInput>
  }

  export type ChitSchemeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ChitSchemeWhereUniqueInput
    data: XOR<ChitSchemeUpdateWithoutCreatorInput, ChitSchemeUncheckedUpdateWithoutCreatorInput>
  }

  export type ChitSchemeUpdateManyWithWhereWithoutCreatorInput = {
    where: ChitSchemeScalarWhereInput
    data: XOR<ChitSchemeUpdateManyMutationInput, ChitSchemeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChitSchemeScalarWhereInput = {
    AND?: ChitSchemeScalarWhereInput | ChitSchemeScalarWhereInput[]
    OR?: ChitSchemeScalarWhereInput[]
    NOT?: ChitSchemeScalarWhereInput | ChitSchemeScalarWhereInput[]
    id?: StringFilter<"ChitScheme"> | string
    name?: StringFilter<"ChitScheme"> | string
    chitValue?: IntFilter<"ChitScheme"> | number
    duration?: IntFilter<"ChitScheme"> | number
    durationType?: EnumDurationTypeFilter<"ChitScheme"> | $Enums.DurationType
    paymentType?: EnumPaymentTypeFilter<"ChitScheme"> | $Enums.PaymentType
    dailyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    monthlyPayment?: IntNullableFilter<"ChitScheme"> | number | null
    numberOfMembers?: IntFilter<"ChitScheme"> | number
    auctionRules?: StringNullableFilter<"ChitScheme"> | string | null
    status?: EnumSchemeStatusFilter<"ChitScheme"> | $Enums.SchemeStatus
    membersEnrolled?: IntFilter<"ChitScheme"> | number
    startDate?: DateTimeFilter<"ChitScheme"> | Date | string
    endDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    lastDate?: DateTimeNullableFilter<"ChitScheme"> | Date | string | null
    description?: StringNullableFilter<"ChitScheme"> | string | null
    commissionRate?: FloatNullableFilter<"ChitScheme"> | number | null
    penaltyRate?: FloatNullableFilter<"ChitScheme"> | number | null
    minBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    maxBidAmount?: IntNullableFilter<"ChitScheme"> | number | null
    isActive?: BoolFilter<"ChitScheme"> | boolean
    createdBy?: StringNullableFilter<"ChitScheme"> | string | null
    createdAt?: DateTimeFilter<"ChitScheme"> | Date | string
    updatedAt?: DateTimeFilter<"ChitScheme"> | Date | string
  }

  export type CustomerSchemeCreateWithoutSchemeInput = {
    id?: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutSchemesInput
    passbookEntries?: PassbookEntryCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeUncheckedCreateWithoutSchemeInput = {
    id?: string
    customerId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    passbookEntries?: PassbookEntryUncheckedCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeCreateOrConnectWithoutSchemeInput = {
    where: CustomerSchemeWhereUniqueInput
    create: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput>
  }

  export type CustomerSchemeCreateManySchemeInputEnvelope = {
    data: CustomerSchemeCreateManySchemeInput | CustomerSchemeCreateManySchemeInput[]
    skipDuplicates?: boolean
  }

  export type AuctionCreateWithoutChitSchemeInput = {
    id?: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    winningMember?: CustomerCreateNestedOneWithoutWonAuctionsInput
    createdBy: UserCreateNestedOneWithoutAuctionsInput
  }

  export type AuctionUncheckedCreateWithoutChitSchemeInput = {
    id?: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateOrConnectWithoutChitSchemeInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput>
  }

  export type AuctionCreateManyChitSchemeInputEnvelope = {
    data: AuctionCreateManyChitSchemeInput | AuctionCreateManyChitSchemeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedSchemesInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutCollectorInput
    auctions?: AuctionCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedSchemesInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutCollectorInput
    auctions?: AuctionUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedSchemesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSchemesInput, UserUncheckedCreateWithoutCreatedSchemesInput>
  }

  export type CustomerSchemeUpsertWithWhereUniqueWithoutSchemeInput = {
    where: CustomerSchemeWhereUniqueInput
    update: XOR<CustomerSchemeUpdateWithoutSchemeInput, CustomerSchemeUncheckedUpdateWithoutSchemeInput>
    create: XOR<CustomerSchemeCreateWithoutSchemeInput, CustomerSchemeUncheckedCreateWithoutSchemeInput>
  }

  export type CustomerSchemeUpdateWithWhereUniqueWithoutSchemeInput = {
    where: CustomerSchemeWhereUniqueInput
    data: XOR<CustomerSchemeUpdateWithoutSchemeInput, CustomerSchemeUncheckedUpdateWithoutSchemeInput>
  }

  export type CustomerSchemeUpdateManyWithWhereWithoutSchemeInput = {
    where: CustomerSchemeScalarWhereInput
    data: XOR<CustomerSchemeUpdateManyMutationInput, CustomerSchemeUncheckedUpdateManyWithoutSchemeInput>
  }

  export type CustomerSchemeScalarWhereInput = {
    AND?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
    OR?: CustomerSchemeScalarWhereInput[]
    NOT?: CustomerSchemeScalarWhereInput | CustomerSchemeScalarWhereInput[]
    id?: StringFilter<"CustomerScheme"> | string
    customerId?: StringFilter<"CustomerScheme"> | string
    schemeId?: StringFilter<"CustomerScheme"> | string
    enrolledAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    status?: EnumCustomerStatusFilter<"CustomerScheme"> | $Enums.CustomerStatus
    amountPerDay?: IntFilter<"CustomerScheme"> | number
    duration?: IntFilter<"CustomerScheme"> | number
    durationType?: EnumDurationTypeFilter<"CustomerScheme"> | $Enums.DurationType
    startDate?: DateTimeFilter<"CustomerScheme"> | Date | string
    lastDate?: DateTimeNullableFilter<"CustomerScheme"> | Date | string | null
    balance?: IntFilter<"CustomerScheme"> | number
    createdAt?: DateTimeFilter<"CustomerScheme"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerScheme"> | Date | string
  }

  export type AuctionUpsertWithWhereUniqueWithoutChitSchemeInput = {
    where: AuctionWhereUniqueInput
    update: XOR<AuctionUpdateWithoutChitSchemeInput, AuctionUncheckedUpdateWithoutChitSchemeInput>
    create: XOR<AuctionCreateWithoutChitSchemeInput, AuctionUncheckedCreateWithoutChitSchemeInput>
  }

  export type AuctionUpdateWithWhereUniqueWithoutChitSchemeInput = {
    where: AuctionWhereUniqueInput
    data: XOR<AuctionUpdateWithoutChitSchemeInput, AuctionUncheckedUpdateWithoutChitSchemeInput>
  }

  export type AuctionUpdateManyWithWhereWithoutChitSchemeInput = {
    where: AuctionScalarWhereInput
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyWithoutChitSchemeInput>
  }

  export type UserUpsertWithoutCreatedSchemesInput = {
    update: XOR<UserUpdateWithoutCreatedSchemesInput, UserUncheckedUpdateWithoutCreatedSchemesInput>
    create: XOR<UserCreateWithoutCreatedSchemesInput, UserUncheckedCreateWithoutCreatedSchemesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSchemesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSchemesInput, UserUncheckedUpdateWithoutCreatedSchemesInput>
  }

  export type UserUpdateWithoutCreatedSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutCollectorNestedInput
    auctions?: AuctionUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutCollectorNestedInput
    auctions?: AuctionUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type CustomerSchemeCreateWithoutCustomerInput = {
    id?: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    scheme: ChitSchemeCreateNestedOneWithoutCustomerSchemesInput
    passbookEntries?: PassbookEntryCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeUncheckedCreateWithoutCustomerInput = {
    id?: string
    schemeId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    passbookEntries?: PassbookEntryUncheckedCreateNestedManyWithoutCustomerSchemeInput
  }

  export type CustomerSchemeCreateOrConnectWithoutCustomerInput = {
    where: CustomerSchemeWhereUniqueInput
    create: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerSchemeCreateManyCustomerInputEnvelope = {
    data: CustomerSchemeCreateManyCustomerInput | CustomerSchemeCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CollectionCreateWithoutCustomerInput = {
    id?: string
    amountPaid: number
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    collector: UserCreateNestedOneWithoutCollectionsInput
  }

  export type CollectionUncheckedCreateWithoutCustomerInput = {
    id?: string
    amountPaid: number
    collectorId: string
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionCreateOrConnectWithoutCustomerInput = {
    where: CollectionWhereUniqueInput
    create: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput>
  }

  export type CollectionCreateManyCustomerInputEnvelope = {
    data: CollectionCreateManyCustomerInput | CollectionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type AuctionCreateWithoutWinningMemberInput = {
    id?: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chitScheme: ChitSchemeCreateNestedOneWithoutAuctionsInput
    createdBy: UserCreateNestedOneWithoutAuctionsInput
  }

  export type AuctionUncheckedCreateWithoutWinningMemberInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateOrConnectWithoutWinningMemberInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput>
  }

  export type AuctionCreateManyWinningMemberInputEnvelope = {
    data: AuctionCreateManyWinningMemberInput | AuctionCreateManyWinningMemberInput[]
    skipDuplicates?: boolean
  }

  export type CustomerSchemeUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerSchemeWhereUniqueInput
    update: XOR<CustomerSchemeUpdateWithoutCustomerInput, CustomerSchemeUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerSchemeCreateWithoutCustomerInput, CustomerSchemeUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerSchemeUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerSchemeWhereUniqueInput
    data: XOR<CustomerSchemeUpdateWithoutCustomerInput, CustomerSchemeUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerSchemeUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerSchemeScalarWhereInput
    data: XOR<CustomerSchemeUpdateManyMutationInput, CustomerSchemeUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CollectionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CollectionWhereUniqueInput
    update: XOR<CollectionUpdateWithoutCustomerInput, CollectionUncheckedUpdateWithoutCustomerInput>
    create: XOR<CollectionCreateWithoutCustomerInput, CollectionUncheckedCreateWithoutCustomerInput>
  }

  export type CollectionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CollectionWhereUniqueInput
    data: XOR<CollectionUpdateWithoutCustomerInput, CollectionUncheckedUpdateWithoutCustomerInput>
  }

  export type CollectionUpdateManyWithWhereWithoutCustomerInput = {
    where: CollectionScalarWhereInput
    data: XOR<CollectionUpdateManyMutationInput, CollectionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type AuctionUpsertWithWhereUniqueWithoutWinningMemberInput = {
    where: AuctionWhereUniqueInput
    update: XOR<AuctionUpdateWithoutWinningMemberInput, AuctionUncheckedUpdateWithoutWinningMemberInput>
    create: XOR<AuctionCreateWithoutWinningMemberInput, AuctionUncheckedCreateWithoutWinningMemberInput>
  }

  export type AuctionUpdateWithWhereUniqueWithoutWinningMemberInput = {
    where: AuctionWhereUniqueInput
    data: XOR<AuctionUpdateWithoutWinningMemberInput, AuctionUncheckedUpdateWithoutWinningMemberInput>
  }

  export type AuctionUpdateManyWithWhereWithoutWinningMemberInput = {
    where: AuctionScalarWhereInput
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyWithoutWinningMemberInput>
  }

  export type CustomerCreateWithoutSchemesInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerUncheckedCreateWithoutSchemesInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionUncheckedCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerCreateOrConnectWithoutSchemesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSchemesInput, CustomerUncheckedCreateWithoutSchemesInput>
  }

  export type ChitSchemeCreateWithoutCustomerSchemesInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auctions?: AuctionCreateNestedManyWithoutChitSchemeInput
    creator?: UserCreateNestedOneWithoutCreatedSchemesInput
  }

  export type ChitSchemeUncheckedCreateWithoutCustomerSchemesInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    auctions?: AuctionUncheckedCreateNestedManyWithoutChitSchemeInput
  }

  export type ChitSchemeCreateOrConnectWithoutCustomerSchemesInput = {
    where: ChitSchemeWhereUniqueInput
    create: XOR<ChitSchemeCreateWithoutCustomerSchemesInput, ChitSchemeUncheckedCreateWithoutCustomerSchemesInput>
  }

  export type PassbookEntryCreateWithoutCustomerSchemeInput = {
    id?: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassbookEntryUncheckedCreateWithoutCustomerSchemeInput = {
    id?: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassbookEntryCreateOrConnectWithoutCustomerSchemeInput = {
    where: PassbookEntryWhereUniqueInput
    create: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput>
  }

  export type PassbookEntryCreateManyCustomerSchemeInputEnvelope = {
    data: PassbookEntryCreateManyCustomerSchemeInput | PassbookEntryCreateManyCustomerSchemeInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithoutSchemesInput = {
    update: XOR<CustomerUpdateWithoutSchemesInput, CustomerUncheckedUpdateWithoutSchemesInput>
    create: XOR<CustomerCreateWithoutSchemesInput, CustomerUncheckedCreateWithoutSchemesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSchemesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSchemesInput, CustomerUncheckedUpdateWithoutSchemesInput>
  }

  export type CustomerUpdateWithoutSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUpdateManyWithoutWinningMemberNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUncheckedUpdateManyWithoutWinningMemberNestedInput
  }

  export type ChitSchemeUpsertWithoutCustomerSchemesInput = {
    update: XOR<ChitSchemeUpdateWithoutCustomerSchemesInput, ChitSchemeUncheckedUpdateWithoutCustomerSchemesInput>
    create: XOR<ChitSchemeCreateWithoutCustomerSchemesInput, ChitSchemeUncheckedCreateWithoutCustomerSchemesInput>
    where?: ChitSchemeWhereInput
  }

  export type ChitSchemeUpdateToOneWithWhereWithoutCustomerSchemesInput = {
    where?: ChitSchemeWhereInput
    data: XOR<ChitSchemeUpdateWithoutCustomerSchemesInput, ChitSchemeUncheckedUpdateWithoutCustomerSchemesInput>
  }

  export type ChitSchemeUpdateWithoutCustomerSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctions?: AuctionUpdateManyWithoutChitSchemeNestedInput
    creator?: UserUpdateOneWithoutCreatedSchemesNestedInput
  }

  export type ChitSchemeUncheckedUpdateWithoutCustomerSchemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctions?: AuctionUncheckedUpdateManyWithoutChitSchemeNestedInput
  }

  export type PassbookEntryUpsertWithWhereUniqueWithoutCustomerSchemeInput = {
    where: PassbookEntryWhereUniqueInput
    update: XOR<PassbookEntryUpdateWithoutCustomerSchemeInput, PassbookEntryUncheckedUpdateWithoutCustomerSchemeInput>
    create: XOR<PassbookEntryCreateWithoutCustomerSchemeInput, PassbookEntryUncheckedCreateWithoutCustomerSchemeInput>
  }

  export type PassbookEntryUpdateWithWhereUniqueWithoutCustomerSchemeInput = {
    where: PassbookEntryWhereUniqueInput
    data: XOR<PassbookEntryUpdateWithoutCustomerSchemeInput, PassbookEntryUncheckedUpdateWithoutCustomerSchemeInput>
  }

  export type PassbookEntryUpdateManyWithWhereWithoutCustomerSchemeInput = {
    where: PassbookEntryScalarWhereInput
    data: XOR<PassbookEntryUpdateManyMutationInput, PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeInput>
  }

  export type PassbookEntryScalarWhereInput = {
    AND?: PassbookEntryScalarWhereInput | PassbookEntryScalarWhereInput[]
    OR?: PassbookEntryScalarWhereInput[]
    NOT?: PassbookEntryScalarWhereInput | PassbookEntryScalarWhereInput[]
    id?: StringFilter<"PassbookEntry"> | string
    customerSchemeId?: StringFilter<"PassbookEntry"> | string
    month?: IntFilter<"PassbookEntry"> | number
    date?: DateTimeFilter<"PassbookEntry"> | Date | string
    dailyPayment?: IntFilter<"PassbookEntry"> | number
    amount?: IntFilter<"PassbookEntry"> | number
    chittiAmount?: IntFilter<"PassbookEntry"> | number
    chitLiftingAmount?: IntNullableFilter<"PassbookEntry"> | number | null
    type?: EnumEntryTypeFilter<"PassbookEntry"> | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFilter<"PassbookEntry"> | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFilter<"PassbookEntry"> | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFilter<"PassbookEntry"> | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFilter<"PassbookEntry"> | Date | string
    updatedAt?: DateTimeFilter<"PassbookEntry"> | Date | string
  }

  export type CustomerCreateWithoutCollectionsInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerUncheckedCreateWithoutCollectionsInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeUncheckedCreateNestedManyWithoutCustomerInput
    wonAuctions?: AuctionUncheckedCreateNestedManyWithoutWinningMemberInput
  }

  export type CustomerCreateOrConnectWithoutCollectionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCollectionsInput, CustomerUncheckedCreateWithoutCollectionsInput>
  }

  export type UserCreateWithoutCollectionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auctions?: AuctionCreateNestedManyWithoutCreatedByInput
    createdSchemes?: ChitSchemeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCollectionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auctions?: AuctionUncheckedCreateNestedManyWithoutCreatedByInput
    createdSchemes?: ChitSchemeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCollectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
  }

  export type CustomerUpsertWithoutCollectionsInput = {
    update: XOR<CustomerUpdateWithoutCollectionsInput, CustomerUncheckedUpdateWithoutCollectionsInput>
    create: XOR<CustomerCreateWithoutCollectionsInput, CustomerUncheckedCreateWithoutCollectionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCollectionsInput, CustomerUncheckedUpdateWithoutCollectionsInput>
  }

  export type CustomerUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUpdateManyWithoutWinningMemberNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUncheckedUpdateManyWithoutCustomerNestedInput
    wonAuctions?: AuctionUncheckedUpdateManyWithoutWinningMemberNestedInput
  }

  export type UserUpsertWithoutCollectionsInput = {
    update: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type UserUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctions?: AuctionUpdateManyWithoutCreatedByNestedInput
    createdSchemes?: ChitSchemeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCollectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auctions?: AuctionUncheckedUpdateManyWithoutCreatedByNestedInput
    createdSchemes?: ChitSchemeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ChitSchemeCreateWithoutAuctionsInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeCreateNestedManyWithoutSchemeInput
    creator?: UserCreateNestedOneWithoutCreatedSchemesInput
  }

  export type ChitSchemeUncheckedCreateWithoutAuctionsInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSchemes?: CustomerSchemeUncheckedCreateNestedManyWithoutSchemeInput
  }

  export type ChitSchemeCreateOrConnectWithoutAuctionsInput = {
    where: ChitSchemeWhereUniqueInput
    create: XOR<ChitSchemeCreateWithoutAuctionsInput, ChitSchemeUncheckedCreateWithoutAuctionsInput>
  }

  export type CustomerCreateWithoutWonAuctionsInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeCreateNestedManyWithoutCustomerInput
    collections?: CollectionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutWonAuctionsInput = {
    id?: string
    name: string
    mobile: string
    address: string
    startDate: Date | string
    lastDate?: Date | string | null
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    status?: $Enums.CustomerStatus
    balance?: number
    photo?: string | null
    documents?: CustomerCreatedocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    schemes?: CustomerSchemeUncheckedCreateNestedManyWithoutCustomerInput
    collections?: CollectionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutWonAuctionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutWonAuctionsInput, CustomerUncheckedCreateWithoutWonAuctionsInput>
  }

  export type UserCreateWithoutAuctionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionCreateNestedManyWithoutCollectorInput
    createdSchemes?: ChitSchemeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAuctionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    collections?: CollectionUncheckedCreateNestedManyWithoutCollectorInput
    createdSchemes?: ChitSchemeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAuctionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
  }

  export type ChitSchemeUpsertWithoutAuctionsInput = {
    update: XOR<ChitSchemeUpdateWithoutAuctionsInput, ChitSchemeUncheckedUpdateWithoutAuctionsInput>
    create: XOR<ChitSchemeCreateWithoutAuctionsInput, ChitSchemeUncheckedCreateWithoutAuctionsInput>
    where?: ChitSchemeWhereInput
  }

  export type ChitSchemeUpdateToOneWithWhereWithoutAuctionsInput = {
    where?: ChitSchemeWhereInput
    data: XOR<ChitSchemeUpdateWithoutAuctionsInput, ChitSchemeUncheckedUpdateWithoutAuctionsInput>
  }

  export type ChitSchemeUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUpdateManyWithoutSchemeNestedInput
    creator?: UserUpdateOneWithoutCreatedSchemesNestedInput
  }

  export type ChitSchemeUncheckedUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUncheckedUpdateManyWithoutSchemeNestedInput
  }

  export type CustomerUpsertWithoutWonAuctionsInput = {
    update: XOR<CustomerUpdateWithoutWonAuctionsInput, CustomerUncheckedUpdateWithoutWonAuctionsInput>
    create: XOR<CustomerCreateWithoutWonAuctionsInput, CustomerUncheckedCreateWithoutWonAuctionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutWonAuctionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutWonAuctionsInput, CustomerUncheckedUpdateWithoutWonAuctionsInput>
  }

  export type CustomerUpdateWithoutWonAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUpdateManyWithoutCustomerNestedInput
    collections?: CollectionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutWonAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    balance?: IntFieldUpdateOperationsInput | number
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: CustomerUpdatedocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schemes?: CustomerSchemeUncheckedUpdateManyWithoutCustomerNestedInput
    collections?: CollectionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutAuctionsInput = {
    update: XOR<UserUpdateWithoutAuctionsInput, UserUncheckedUpdateWithoutAuctionsInput>
    create: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuctionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuctionsInput, UserUncheckedUpdateWithoutAuctionsInput>
  }

  export type UserUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUpdateManyWithoutCollectorNestedInput
    createdSchemes?: ChitSchemeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAuctionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collections?: CollectionUncheckedUpdateManyWithoutCollectorNestedInput
    createdSchemes?: ChitSchemeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CustomerSchemeCreateWithoutPassbookEntriesInput = {
    id?: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutSchemesInput
    scheme: ChitSchemeCreateNestedOneWithoutCustomerSchemesInput
  }

  export type CustomerSchemeUncheckedCreateWithoutPassbookEntriesInput = {
    id?: string
    customerId: string
    schemeId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSchemeCreateOrConnectWithoutPassbookEntriesInput = {
    where: CustomerSchemeWhereUniqueInput
    create: XOR<CustomerSchemeCreateWithoutPassbookEntriesInput, CustomerSchemeUncheckedCreateWithoutPassbookEntriesInput>
  }

  export type CustomerSchemeUpsertWithoutPassbookEntriesInput = {
    update: XOR<CustomerSchemeUpdateWithoutPassbookEntriesInput, CustomerSchemeUncheckedUpdateWithoutPassbookEntriesInput>
    create: XOR<CustomerSchemeCreateWithoutPassbookEntriesInput, CustomerSchemeUncheckedCreateWithoutPassbookEntriesInput>
    where?: CustomerSchemeWhereInput
  }

  export type CustomerSchemeUpdateToOneWithWhereWithoutPassbookEntriesInput = {
    where?: CustomerSchemeWhereInput
    data: XOR<CustomerSchemeUpdateWithoutPassbookEntriesInput, CustomerSchemeUncheckedUpdateWithoutPassbookEntriesInput>
  }

  export type CustomerSchemeUpdateWithoutPassbookEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutSchemesNestedInput
    scheme?: ChitSchemeUpdateOneRequiredWithoutCustomerSchemesNestedInput
  }

  export type CustomerSchemeUncheckedUpdateWithoutPassbookEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    schemeId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionCreateManyCollectorInput = {
    id?: string
    customerId: string
    amountPaid: number
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateManyCreatedByInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChitSchemeCreateManyCreatorInput = {
    id?: string
    name: string
    chitValue: number
    duration: number
    durationType: $Enums.DurationType
    paymentType?: $Enums.PaymentType
    dailyPayment?: number | null
    monthlyPayment?: number | null
    numberOfMembers: number
    auctionRules?: string | null
    status?: $Enums.SchemeStatus
    membersEnrolled?: number
    startDate: Date | string
    endDate?: Date | string | null
    lastDate?: Date | string | null
    description?: string | null
    commissionRate?: number | null
    penaltyRate?: number | null
    minBidAmount?: number | null
    maxBidAmount?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionUpdateWithoutCollectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionUncheckedUpdateWithoutCollectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionUncheckedUpdateManyWithoutCollectorInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chitScheme?: ChitSchemeUpdateOneRequiredWithoutAuctionsNestedInput
    winningMember?: CustomerUpdateOneWithoutWonAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChitSchemeUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUpdateManyWithoutSchemeNestedInput
    auctions?: AuctionUpdateManyWithoutChitSchemeNestedInput
  }

  export type ChitSchemeUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSchemes?: CustomerSchemeUncheckedUpdateManyWithoutSchemeNestedInput
    auctions?: AuctionUncheckedUpdateManyWithoutChitSchemeNestedInput
  }

  export type ChitSchemeUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    chitValue?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    dailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    monthlyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    numberOfMembers?: IntFieldUpdateOperationsInput | number
    auctionRules?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSchemeStatusFieldUpdateOperationsInput | $Enums.SchemeStatus
    membersEnrolled?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    commissionRate?: NullableFloatFieldUpdateOperationsInput | number | null
    penaltyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    minBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    maxBidAmount?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSchemeCreateManySchemeInput = {
    id?: string
    customerId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateManyChitSchemeInput = {
    id?: string
    auctionDate: Date | string
    winningMemberId?: string | null
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSchemeUpdateWithoutSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutSchemesNestedInput
    passbookEntries?: PassbookEntryUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeUncheckedUpdateWithoutSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passbookEntries?: PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeUncheckedUpdateManyWithoutSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUpdateWithoutChitSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMember?: CustomerUpdateOneWithoutWonAuctionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateWithoutChitSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyWithoutChitSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    winningMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSchemeCreateManyCustomerInput = {
    id?: string
    schemeId: string
    enrolledAt?: Date | string
    status?: $Enums.CustomerStatus
    amountPerDay: number
    duration: number
    durationType?: $Enums.DurationType
    startDate: Date | string
    lastDate?: Date | string | null
    balance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollectionCreateManyCustomerInput = {
    id?: string
    amountPaid: number
    collectorId: string
    date: Date | string
    balanceRemaining: number
    paymentMethod: $Enums.PaymentMethod
    remarks?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuctionCreateManyWinningMemberInput = {
    id?: string
    chitSchemeId: string
    auctionDate: Date | string
    amountReceived?: number
    discountAmount?: number
    newDailyPayment?: number | null
    previousDailyPayment?: number | null
    status?: $Enums.AuctionStatus
    remarks?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSchemeUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheme?: ChitSchemeUpdateOneRequiredWithoutCustomerSchemesNestedInput
    passbookEntries?: PassbookEntryUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    schemeId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passbookEntries?: PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeNestedInput
  }

  export type CustomerSchemeUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    schemeId?: StringFieldUpdateOperationsInput | string
    enrolledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    amountPerDay?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    durationType?: EnumDurationTypeFieldUpdateOperationsInput | $Enums.DurationType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    balance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collector?: UserUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type CollectionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    collectorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollectionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountPaid?: IntFieldUpdateOperationsInput | number
    collectorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    balanceRemaining?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUpdateWithoutWinningMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chitScheme?: ChitSchemeUpdateOneRequiredWithoutAuctionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateWithoutWinningMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionUncheckedUpdateManyWithoutWinningMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    chitSchemeId?: StringFieldUpdateOperationsInput | string
    auctionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amountReceived?: IntFieldUpdateOperationsInput | number
    discountAmount?: IntFieldUpdateOperationsInput | number
    newDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    previousDailyPayment?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumAuctionStatusFieldUpdateOperationsInput | $Enums.AuctionStatus
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryCreateManyCustomerSchemeInput = {
    id?: string
    month: number
    date: Date | string
    dailyPayment: number
    amount: number
    chittiAmount: number
    chitLiftingAmount?: number | null
    type?: $Enums.EntryType
    paymentMethod?: $Enums.PaymentMethod
    paymentFrequency?: $Enums.PaymentFrequency
    chitLifting?: $Enums.ChitLiftingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PassbookEntryUpdateWithoutCustomerSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryUncheckedUpdateWithoutCustomerSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PassbookEntryUncheckedUpdateManyWithoutCustomerSchemeInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyPayment?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    chittiAmount?: IntFieldUpdateOperationsInput | number
    chitLiftingAmount?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumEntryTypeFieldUpdateOperationsInput | $Enums.EntryType
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentFrequency?: EnumPaymentFrequencyFieldUpdateOperationsInput | $Enums.PaymentFrequency
    chitLifting?: EnumChitLiftingStatusFieldUpdateOperationsInput | $Enums.ChitLiftingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChitSchemeCountOutputTypeDefaultArgs instead
     */
    export type ChitSchemeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChitSchemeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerSchemeCountOutputTypeDefaultArgs instead
     */
    export type CustomerSchemeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerSchemeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChitSchemeDefaultArgs instead
     */
    export type ChitSchemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChitSchemeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerSchemeDefaultArgs instead
     */
    export type CustomerSchemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerSchemeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollectionDefaultArgs instead
     */
    export type CollectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionDefaultArgs instead
     */
    export type AuctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PassbookEntryDefaultArgs instead
     */
    export type PassbookEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PassbookEntryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}